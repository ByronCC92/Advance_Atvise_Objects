<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="310" version="1.2" width="440" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="optional" desc="Input Node" name="Input" valuetype="address"/>
  <atv:parameter behavior="optional" desc="Alert Range" name="Alert_Range" valuetype="address"/>
  <atv:parameter behavior="optional" desc="Object Conditions Node" name="Object_Conditions" valuetype="address"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Line Color" name="Color_Linea" valuetype="global"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Band Color" name="Color_Banda" valuetype="global"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Display_PopUp" name="Display_PopUp" valuetype="display"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="true" height="10" width="10"/>
 </metadata>
 <foreignObject height="310" id="chart_container" width="440" x="0" y="0">
  <div style="width:100%;height:100%" xmlns="http://www.w3.org/1999/xhtml"/>
 </foreignObject>
 <rect atv:refpx="220" atv:refpy="155" fill="none" height="310" id="border" stroke="#000000" stroke-width="2" width="440" x="0" y="0"/>
 <text atv:refpx="220" atv:refpy="155" fill="none" font-family="Arial" font-size="12" id="label" x="183.5" y="159.5">Grafico Trend</text>
 <script atv:desc="" atv:name="" type="text/ecmascript" xlink:href="../../highcharts/highcharts.js"/>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[//Variables Externas
var Input= webMI.query["Input"];
var Alert_RangeR= webMI.query["Alert_Range"];
var Object_ConditionsR= webMI.query["Object_Conditions"];
var Color_Linea = webMI.query["Color_Linea"];
var Color_Banda = webMI.query["Color_Banda"];
var Display_PopUp= webMI.query["Display_PopUp"];

//Variables Internas
var Condiciones=new Array();
var Rango_Alarmas;
var range_mili=2*60*1000;

var to= new Date(); 
var from= new Date(to-(range_mili)); //Dos minutos por ahora

var chart_1;
var AlarmHigh;
var AlarmLow;
var AlertHigh;
var AlertLow;

webMI.addOnload(function () {

	//Encuentro el contenedor
	var chartDiv = document.getElementById("chart_container");
	
	//Oculto elementos
	webMI.gfx.setVisible("label", false);
	webMI.gfx.setVisible("border", false);
	
	webMI.gfx.setScaledEvents(chartDiv);
	
	
	// Leo variables Iniciales
	if(Object_ConditionsR!=undefined && Alert_RangeR!=undefined){
		webMI.data.read([Object_ConditionsR,Alert_RangeR], function(e) {
		   var Object_Conditions=e[0].value;
		   var Alert_Range=e[1].value;
		   if(Object_Conditions.length!=0){ //No esta vacio
				for (var i=0; i<Object_Conditions.length; i++){
					//Busca condiciones del nodo correspondiente
					var Object_ConditionsI=JSON.parse(Object_Conditions[i]);
					if (Object_ConditionsI.Condition_node.split('ns=1;s=').pop()==Input) { 
						Condiciones.push(Object_ConditionsI);
						if (Object_ConditionsI.Condition_type=="Max"){ //Alarma máxima
							AlarmHigh=Object_ConditionsI.Condition_limit;
						}
						else if (Object_ConditionsI.Condition_type=="Min"){ //Alarma máxima
							AlarmLow=Object_ConditionsI.Condition_limit;
						}
					}
				}
				Rango_Alarmas=Condiciones[0].Rango;//Obtengo el rango		
				AlertHigh=AlarmHigh-(Alert_Range*Rango_Alarmas/100);
				AlertLow=AlarmLow+(Alert_Range*Rango_Alarmas/100);
			   }
		});
	}
	
	setTimeout(function(){
	
	
		//-----------------Adquiero datos---------------//	
		
		var filter = {};
		filter.type = ["v:1"]; //Filtro para definir tipo de variable requerida 1 - value changes (incl. aggregates), 2 - alarms, 3 - events
		filter.address = ["g:"+Input]; //Filtro donde le agrego la dirección del nodo
		filter.timestamp = ["n:>=" + from.getTime() + "<" + to.getTime()]; //Filtro donde determino el espacio de tiempo que requiero
	
		//Leo Datos historicos
		webMI.data.queryFilter(filter, function(e) {
		
			var result= e.result;			
			var data= new Array();	
			
			//Preparo datos	
			for (var i=0; i < result.length; i++){
				data.push(
					{x:result[i].timestamp,
					y:result[i].value}
				);		
			}	
	
		
			//Creo el Grafico
					
			chart_1 = Highcharts.chart(chartDiv,{
				
				//Parametros de configuración del gráfico
				chart: {
					
					type: 'spline', 
					margin:[0,0,0,0], 
					borderWidth:0,
					backgroundColor: 'transparent',
					style: {
						overflow: 'visible'
					},
					events: {
							click: function(event) {
							  //Abro ventana						
								webMI.display.openWindow({display:Display_PopUp,extern:false,height:660,menubar:false,modal:false,movable:true,resizable:true,scrollbars:false,status:false,title:"T{Configuracion General }"+(webMI.query["base"]).split('.').pop(),toolbar:false,width:603,query:webMI.query});
							}
				    },
					skipClone: true				
				},
				
				//Título del gráfico
				title:{
					text:''
				},
				
				//Creditos del gráfico
				credits:{
					enabled:false
				},
				
				//Configuración del eje x
				xAxis: {
					type: 'datetime', 
					min: to-(range_mili),  //Tiempo inicial apenas cargo el gráfico (tiempo actual-rango de tiempo que quiero mostrar)
					max: to, //Tiempo cuando cargo el gráfico
					labels: {
						enabled:true
					}
				},
				
				//Configuración del eje y
					yAxis: {  
						min: AlarmLow,  //Tamaño máximo del eje y
						max: AlarmHigh, //Tamaño mínimo del eje y
						endOnTick: false,
						startOnTick: false,
						labels: {
							enabled: false
						},
						title: {
							text: null
						},
						
						//Le agrego bandas para definir el rango que quiero deseado de operación
						plotBands: [{ 
							from: AlertLow,
							to: AlertHigh,
							color: Color_Banda, //Color de las bandas
						}],
						tickPositions: [0]
					},
				
				//Le agrego la leyenda
				legend: {
					enabled:false
				},
				
				//Le agrego el tooltip
				tooltip: {
					enabled:false,
				},
				
				//Exporto
				exporting: {
					enabled: false,
				},
			
				//Opciones de ploteo y linea
				plotOptions: {
					series:{
						lineWidth:2,
						shadow:true,
						events: {
							click: function(event) {
							  //Abro ventana						
								webMI.display.openWindow({display:Display_PopUp,extern:false,height:660,menubar:false,modal:false,movable:true,resizable:true,scrollbars:false,status:false,title:"T{Configuracion General }"+(webMI.query["base"]).split('.').pop(),toolbar:false,width:603,query:webMI.query});
							}
				        },						
						states:{
							//Como cambia cuando pongo el cursor sobre la linea
							hover:{
								lineWidth:3
							}
						},
						marker:{
							enabled:false,
							radius:1,
							states:{
								//Como cambia cuando pongo el cursor sobre el marcador
								hover:{
									radius:2
								}
							}
						}
					}
				},
				
				//Defino las series que voy a mostrar inicialmente
				series: [{
					color:Color_Linea, //Color de la línea
					fillColor:'rgba(204,204,204,.25)', 
					data: data, //Utiliza el array que cree en Query 1 que es el primer batch de datos que muestra el gráfico
					labels: {
						enabled: false
					}
					
				}]
			});
		},200);
	});	
});

//Actualizo el grafico
webMI.data.subscribe(Input, function(e) {
	if(chart_1!=undefined){
		var y=e.value; //Nuevo valor
		var x=new Date().getTime();//Nuevo Timestamp
		
		var series=chart_1.series[0];
		var axis=chart_1.xAxis[0];    
		
		series.addPoint([x, y], true, false); //Agrego un punto nuevo
		axis.setExtremes(new Date().getTime()-(range_mili), x, true, false); 
	}
});

]]></script>
</svg>
