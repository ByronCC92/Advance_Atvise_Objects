<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="900" version="1.2" width="800" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs>
  <linearGradient gradientUnits="objectBoundingBox" id="linear_0" x1="0.0181818" x2="0.981818" y1="0.454545" y2="0.454545">
   <stop offset="0.024271844660194174" stop-color="#9e9e9e"/>
   <stop offset="0.51941747572815533" stop-color="#ffffff"/>
   <stop offset="0.99514563106796117" stop-color="#9e9e9e"/>
  </linearGradient>
 </defs>
 <metadata>
  <atv:parameter behavior="optional" defaultvalue="" desc="Name" name="Name" substitute="$Name$" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Title" name="Title" substitute="$Ttile$" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Sudtitle" name="Subtitle" substitute="$Subtitle$" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="AddressPopUp" name="AddressPopUp" substitute="$Addresses$" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="#000000" desc="Font Color PopUp" name="FontColorPopUp" substitute="$FontColorPopUp$" valuetype="color"/>
  <atv:parameter behavior="optional" defaultvalue="#999999" desc="HeaderColorPopUp" name="HeaderColorPopUp" substitute="$HeaderColorPopUp$" valuetype="color"/>
  <atv:parameter behavior="optional" defaultvalue="#d3d3d3" desc="BackgroundColorPopUp" name="BackgroundColorPopUp" substitute="$BackgroundColorPopUp$" valuetype="color"/>
  <atv:parameter behavior="optional" desc="Alarm Conditions node" name="Alarm_Conditions" valuetype="address"/>
  <atv:parameter behavior="optional" desc="Alarm 1" name="alarm" valuetype="address"/>
  <atv:parameter behavior="optional" desc="Alarm 2" name="alarm2" valuetype="address"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="true" height="10" width="10"/>
 </metadata>
 <rect atv:refpx="400" atv:refpy="75" fill="$HeaderColorPopUp$" height="150" id="id_3" stroke="none" stroke-width="2" width="800" x="0" y="0"/>
 <text atv:refpx="356" atv:refpy="43" fill="$FontColorPopUp$" font-family="Arial" font-size="36" id="id_0" text-anchor="middle" x="400" y="47.5">$Name$</text>
 <text atv:refpx="377.25" atv:refpy="83.299" fill="$FontColorPopUp$" font-family="Arial" font-size="28" id="id_1" text-anchor="middle" x="400" y="87.799">$Ttile$</text>
 <text atv:refpx="371.5" atv:refpy="121.599" fill="$FontColorPopUp$" font-family="Arial" font-size="28" id="id_2" text-anchor="middle" x="400" y="126.099">$Name$</text>
 <rect atv:refpx="400" atv:refpy="525" fill="$BackgroundColorPopUp$" height="750" id="id_5" stroke="none" stroke-width="2" width="800" x="0" y="150"/>
 <rect atv:refpx="405" atv:refpy="171.75" fill="#000000" fill-opacity="0" height="40" id="id_6" stroke="$HeaderColorPopUp$" stroke-width="1" width="750" x="30" y="156.75"/>
 <text atv:refpx="364.5" atv:refpy="182.25" fill="$FontColorPopUp$" font-family="Arial" font-size="28" id="text_Address" text-anchor="middle" x="399.5" y="186.75">Addresses</text>
 <rect atv:refpx="150" atv:refpy="223" fill="#000000" fill-opacity="0" height="40" id="id_4" stroke="$HeaderColorPopUp$" stroke-width="1" width="240" x="30" y="208"/>
 <rect atv:refpx="409" atv:refpy="223" fill="#000000" fill-opacity="0" height="40" id="id_8" stroke="$HeaderColorPopUp$" stroke-width="1" width="240" x="289" y="208"/>
 <rect atv:refpx="660" atv:refpy="225" fill="#000000" fill-opacity="0" height="40" id="id_9" stroke="$HeaderColorPopUp$" stroke-width="1" width="240" x="540" y="210"/>
 <text atv:refpx="119.25" atv:refpy="236" fill="$FontColorPopUp$" font-family="Arial" font-size="28" id="text_over_range" text-anchor="middle" x="158.5" y="240.5">Over Range</text>
 <text atv:refpx="375" atv:refpy="236" fill="$FontColorPopUp$" font-family="Arial" font-size="28" id="text_under_range" text-anchor="middle" x="418.5" y="240.5">Under Range</text>
 <text atv:refpx="614.75" atv:refpy="236" fill="$FontColorPopUp$" font-family="Arial" font-size="28" id="text_brooken_loop" text-anchor="middle" x="660" y="240.5">Brooken Loop</text>
 <rect atv:refpx="427.5" atv:refpy="580" fill="$HeaderColorPopUp$" height="360" id="id_17" stroke="none" stroke-width="2" width="195" x="330" y="400"/>
 <svg atv:refpx="450" atv:refpy="477" height="32" id="id_7" width="92" x="404" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="461">
  <atv:argument name="Name" value="HH"/>
 </svg>
 <svg atv:refpx="450" atv:refpy="538.5" height="32" id="id_10" width="92" x="404" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="522.5">
  <atv:argument name="Name" value="H"/>
 </svg>
 <svg atv:refpx="450" atv:refpy="601" height="32" id="id_11" width="92" x="404" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="585">
  <atv:argument name="Name" value="L"/>
 </svg>
 <svg atv:refpx="450" atv:refpy="663.5" height="32" id="id_12" width="92" x="404" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="647.5">
  <atv:argument name="Name" value="LL"/>
 </svg>
 <svg atv:refpx="450" atv:refpy="726" height="32" id="id_13" width="92" x="404" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="710">
  <atv:argument name="Name" value="DB"/>
 </svg>
 <text atv:refpx="400" atv:refpy="425.5" fill="#d3d3d3" font-family="Arial" font-size="12" id="id_14" x="400" y="430"/>
 <text atv:refpx="437.15" atv:refpy="426" fill="$FontColorPopUp$" font-family="Arial" font-size="28" font-weight="bold" id="id_16" text-anchor="middle" x="451" y="430.5">LIMITS</text>
 <text atv:refpx="363.8" atv:refpy="480" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_15" text-anchor="middle" x="371" y="484.5">HH:</text>
 <text atv:refpx="374.798" atv:refpy="541" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_18" text-anchor="middle" x="379.5" y="545.5">H:</text>
 <text atv:refpx="377.386" atv:refpy="601" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_19" text-anchor="middle" x="381.5" y="605.5">L:</text>
 <text atv:refpx="368.976" atv:refpy="661" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_20" text-anchor="middle" x="375" y="665.5">LL:</text>
 <text atv:refpx="364.448" atv:refpy="731" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_21" text-anchor="middle" x="371.5" y="735.5">DB:</text>
 <rect atv:refpx="175" atv:refpy="555" fill="url(#linear_0)" height="430" id="id_22" stroke="none" stroke-width="2" width="70" x="140" y="332"/>
 <svg atv:refpx="173.5" atv:refpy="298" height="32" id="id_23" width="92" x="127.5" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="282">
  <atv:argument name="Name" value="HIEGU"/>
 </svg>
 <text atv:refpx="54.247" atv:refpy="301" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_24" text-anchor="middle" x="68.5" y="305.5">HI EGU:</text>
 <svg atv:refpx="178" atv:refpy="798" height="32" id="id_25" width="92" x="132" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Indicators.in_value_custom" y="782">
  <atv:argument name="Name" value="LOEGU"/>
 </svg>
 <text atv:refpx="57.425" atv:refpy="801" fill="$FontColorPopUp$" font-family="Arial" font-size="24" id="id_26" text-anchor="middle" x="73" y="805.5">LO EGU:</text>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[//External variables
var FontColorPopUp = webMI.query["FontColorPopUp"];
var HeaderColorPopUp = webMI.query["HeaderColorPopUp"];
var Alarm_ConditionsR = webMI.query["base"]+".Parameters.Alarm_Conditions";


//Internal Variables
var Limits;
var textIds=["text_over_range","text_under_range","text_brooken_loop"];
var textstatus=[false,false,false];


//Set Text Address
webMI.addOnload(function(e) {
	console.log(Alarm_ConditionsR);
	
	//Set Address Text
	webMI.gfx.setText("text_Address", webMI.query["AddressPopUp"]);

	
	//Update conditions
	update_Text(textIds,textstatus);
	
	webMI.data.read(Alarm_ConditionsR, function(e) {
		
		var LimitsI=JSON.parse(e.value);
		
	    webMI.trigger.fire("write_value_HH", LimitsI.HH);
	    webMI.trigger.fire("write_value_H", LimitsI.H);
	    webMI.trigger.fire("write_value_LL", LimitsI.LL);
	    webMI.trigger.fire("write_value_L", LimitsI.L);
	    webMI.trigger.fire("write_value_DB", LimitsI.DB);
	    webMI.trigger.fire("write_value_HIEGU", LimitsI.HIEGU);
	    webMI.trigger.fire("write_value_LOEGU", LimitsI.LOEGU);
	    
	    Limits=LimitsI;
	});	
});



//Trigger Handeling Section
//HH Input
webMI.trigger.connect("read_value_HH", function(e) {
	//console.log({HH: e.value});
	//writeValidChange(Limits,{HH: e.value});
	Limits.HH=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
});

//H Input
webMI.trigger.connect("read_value_H", function (e) {
	//Custom Change
	Limits.CustomChange=true;		
	
	Limits.H=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
});

//L Input
webMI.trigger.connect("read_value_L", function (e) {
	//Custom Change
	Limits.CustomChange=true;	

	Limits.L=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
});

//LL Input
webMI.trigger.connect("read_value_LL", function (e) {	
	Limits.LL=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
});

//DB Input
webMI.trigger.connect("read_value_DB", function (e) {
	//Custom Change
	Limits.CustomChange=true;

	Limits.DB=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
});


//HIEGU Input
webMI.trigger.connect("read_value_HIEGU", function (e) {
	//Custom Change
	Limits.CustomChange=true;	
	
	Limits.HIEGU=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
	//writeValidChange(Limits,{HIEGU: e.value})
});


//LOEGU Input
webMI.trigger.connect("read_value_LOEGU", function (e) {
	//Custom Change
	Limits.CustomChange=true;

	Limits.LOEGU=e.value;
	webMI.data.write(Alarm_ConditionsR, JSON.stringify(Limits));
});




function update_Text(textIds,textstatus){
	for (var i=0; i<textIds.length;i++){
		if(textstatus[i]==true){
			webMI.gfx.setFill(textIds[i], FontColorPopUp);
		}
		else{
			webMI.gfx.setFill(textIds[i], HeaderColorPopUp);
		}
	}
}

//Checks if changed in Limits is valid and applies it
function writeValidChange(originalObj, changeObj) {
  // Create a copy of the original object to test changes
  let testObj = { ...originalObj, ...changeObj };

  // Extract relevant values
  let { HH, H, L, LL, DB, HIEGU, LOEGU } = testObj;

  // Array to store conflict messages
  let conflicts = [];

  // Boolean to indicate if the change is approved
  let isChangeApproved = true;

  // Check conditions
  if (HIEGU < HH) {
    conflicts.push("HIEGU should be the biggest number.");
    isChangeApproved = false;
  }

  if (HH <= H) {
    conflicts.push("HH should be the second biggest number or equal to H.");
    isChangeApproved = false;
  }

  if (H < LOEGU || H < DB || H < LL || H < L) {
    conflicts.push("H should be the third biggest number or equal to HH.");
    isChangeApproved = false;
  }

  if (LOEGU > DB) {
    conflicts.push("LOEGU should be the lowest number.");
    isChangeApproved = false;
  }

  if (DB > LL) {
    conflicts.push("DB should be the second lowest number.");
    isChangeApproved = false;
  }

  if (LL > L) {
    conflicts.push("LL should be the third lowest number or equal to L.");
    isChangeApproved = false;
  }

  if (L > HIEGU || L > HH || L > H) {
    conflicts.push("L should be the fourth lowest number or equal to LL.");
    isChangeApproved = false;
  }

  // Output conflicts, if any
  if (!isChangeApproved) {
    console.log("Conflict: " + conflicts.join(" "));
  }
  else
  {
    webMI.data.write(Alarm_ConditionsR, JSON.stringify(testObj));
  }

  return { isChangeApproved, object: isChangeApproved ? testObj : originalObj };
}

]]></script>
</svg>
