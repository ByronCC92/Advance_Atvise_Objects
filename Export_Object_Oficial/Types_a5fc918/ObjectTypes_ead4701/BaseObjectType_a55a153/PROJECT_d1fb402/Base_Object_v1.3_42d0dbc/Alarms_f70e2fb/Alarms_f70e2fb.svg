<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="580" version="1.2" width="603" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="optional" defaultvalue="SYSTEM.GLOBALS.Color_Global_1" desc="Color" name="Color" substitute="$Color$" valuetype="global"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="true" height="10" width="10"/>
 </metadata>
 <text atv:refpx="38.879" atv:refpy="31" fill="$Color$" font-family="Arial" font-size="24" id="id_info" x="14.5" y="35.5">Alarms of</text>
 <foreignObject height="320" id="chart_container1" width="560" x="20" y="160">
  <div style="width:100%;height:100%" xmlns="http://www.w3.org/1999/xhtml"/>
 </foreignObject>
 <g atv:refpx="310" atv:refpy="107.501" id="Date_Selection">
  <svg atv:refpx="149.975" atv:refpy="117.496" height="30" id="id_2" transform="matrix(1.625,0,0,1.1667,0,0)" width="160" x="24.615" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" y="94.283">
   <atv:argument name="fontSize" value="20"/>
   <atv:argument name="name" value="Initial_Date"/>
   <atv:overwrite id="button_stroke" transform="matrix(0.6154,0,0,0.8571,0,0)" x="235.5" y="7.501"/>
   <atv:overwrite id="id_1" transform="matrix(0.5538,0,0,0.7714,0,0)" x="262.778" y="9.445"/>
   <atv:overwrite id="button_bg" transform="matrix(0.6154,0,0,0.8571,0,0)" x="235.5" y="7.501"/>
   <atv:overwrite id="datepicker_label" transform="matrix(0.6154,0,0,0.8571,0,0)" x="225.5" y="22.751"/>
   <atv:overwrite height="31.001" id="focus_frame" transform="matrix(0.6154,0,0,0.8571,0,0)" width="256"/>
   <atv:overwrite height="27.001" id="blinking_frame" transform="matrix(0.6154,0,0,0.8571,0,0)" width="228"/>
   <atv:overwrite height="27.001" id="input_bg" transform="matrix(0.6154,0,0,0.8571,0,0)" width="228"/>
   <atv:overwrite height="33.001" id="id_0" transform="matrix(0.6154,0,0,0.8571,0,0)" width="258"/>
   <atv:overwrite height="35.001" id="id_2" transform="matrix(0.6154,0,0,0.8571,0,0)" width="260"/>
  </svg>
  <text atv:refpx="67.126" atv:refpy="91" fill="$Color$" font-family="Arial" font-size="24" id="id_3" x="45" y="95.5">Initial Date</text>
  <svg atv:refpx="429.975" atv:refpy="117.496" height="30" id="id_0" transform="matrix(1.625,0,0,1.1667,0,0)" width="160" x="196.923" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" y="94.283">
   <atv:argument name="fontSize" value="20"/>
   <atv:argument name="name" value="Final_Date"/>
   <atv:overwrite id="button_stroke" transform="matrix(0.6154,0,0,0.8571,0,0)" x="235.5" y="7.501"/>
   <atv:overwrite id="id_1" transform="matrix(0.5538,0,0,0.7714,0,0)" x="262.778" y="9.445"/>
   <atv:overwrite id="button_bg" transform="matrix(0.6154,0,0,0.8571,0,0)" x="235.5" y="7.501"/>
   <atv:overwrite id="datepicker_label" transform="matrix(0.6154,0,0,0.8571,0,0)" x="225.5" y="22.751"/>
   <atv:overwrite height="31.001" id="focus_frame" transform="matrix(0.6154,0,0,0.8571,0,0)" width="256"/>
   <atv:overwrite height="27.001" id="blinking_frame" transform="matrix(0.6154,0,0,0.8571,0,0)" width="228"/>
   <atv:overwrite height="27.001" id="input_bg" transform="matrix(0.6154,0,0,0.8571,0,0)" width="228"/>
   <atv:overwrite height="33.001" id="id_0" transform="matrix(0.6154,0,0,0.8571,0,0)" width="258"/>
   <atv:overwrite height="35.001" id="id_2" transform="matrix(0.6154,0,0,0.8571,0,0)" width="260"/>
  </svg>
  <text atv:refpx="347.326" atv:refpy="91" fill="$Color$" font-family="Arial" font-size="24" id="id_1" x="325" y="95.5">Final Date</text>
 </g>
 <rect atv:refpx="500" atv:refpy="30" fill="#000000" height="40" id="background_play" stroke="none" stroke-width="2" width="40" x="480" y="10"/>
 <rect atv:refpx="550" atv:refpy="30" fill="#000000" height="40" id="background_history" stroke="none" stroke-width="2" width="40" x="530" y="10"/>
 <svg atv:refpx="550" atv:refpy="30" height="20" id="id_7" transform="matrix(2,0,0,2,0,0)" width="20" x="265" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.history" y="5">
  <atv:argument name="symbolColor" value="#ffffff"/>
 </svg>
 <svg atv:refpx="500" atv:refpy="30" height="20" id="id_8" transform="matrix(2,0,0,2,0,0)" width="20" x="240" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.play" y="5">
  <atv:argument name="symbolColor" value="#ffffff"/>
 </svg>
 <rect atv:refpx="500" atv:refpy="30" fill="#000000" fill-opacity="0" height="40" id="click_area_play" stroke="none" stroke-width="2" width="40" x="480" y="10"/>
 <rect atv:refpx="550" atv:refpy="30" fill="#000000" fill-opacity="0" height="40" id="click_area_history" stroke="none" stroke-width="2" width="40" x="530" y="10"/>
 <script atv:desc="" atv:name="" type="text/ecmascript" xlink:href="../../highcharts/highcharts.js"/>
 <script atv:desc="" atv:name="" type="text/ecmascript" xlink:href="../../highcharts/modules/variable-pie.js"/>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[/*******Initialize Variables*******/
//Internal Variables
var to = new Date(); //milliseconds to this instant
var range_mili=(24*60*60*1000);
var from=new Date(to-range_mili);

//Menu Variables
var Backgrounds=["background_play","background_history"];
var Click_Area=["click_area_play","click_area_history"];
var Color=webMI.query["Color"];
var Real_Time=true; //Comienza en tiempo real

//Alarms
var Alarms=new Array();
var Object_ConditionsR=webMI.query["base"]+".Parameters.Object_Conditions";

//Chart
var chart_1;
var Colors=['#3096D0', '#55AEE0', '#89C7EA', '#366078', '#1C4963', '#00A2FF','#2B3E49'];


/*******Initial Conditions*******/
webMI.addOnload(function() {
	
	
	//Read the alarms that are monitored
	webMI.data.read(Object_ConditionsR, function(e) {
	   var Object_ConditionsI=e.value;
	   
		for(var i=0; i<Object_ConditionsI.length;i++){
			var Object_ConditionsII=JSON.parse(Object_ConditionsI[i]);
			Alarms.push((Object_ConditionsII.Condition_name).split('=').pop());
		}
	});	
	
	//DatePicker Configuration
	webMI.trigger.fire("com.atvise.datepicker_Initial_Date", from.getTime()); //Initialize Start Date (1 day ago)
	webMI.trigger.fire("com.atvise.datepicker_Final_Date", to.getTime()); //Initialized End Date

	//Initial text definition
    webMI.gfx.setText("id_info", "Alarms:"+(webMI.query["base"]).split('.').pop());
    
    //Start with Hidden Date Selection
    webMI.gfx.setFill(Backgrounds[0], Color);
    webMI.gfx.setVisible("Date_Selection", false);
   
   
	/*******Chart Section*******/   
    
    setTimeout(function(){
		Monitor_Alarms(Alarms,from,to,function(count) {										
				
						
			 var chartDiv2 = document.getElementById("chart_container1");
			 webMI.gfx.setScaledEvents(chartDiv2);
			 
			 //Prepare Data
			 var Complete_Data=new Array();
			 
			 for (var i=0; i<count.length; i++){
			 
				var Namei= Alarms[i].split('.');
				Complete_Data.push({
					name: Namei.pop(),
					custom: Namei[Namei.length - 2],
					color:Colors[i],
					y: count[i],			
				});
			 }
			
			chart_1=Highcharts.chart(chartDiv2, {
				chart: {
					type: 'pie'
				},
				title: {
					text: 'Last 24h',
					style: {
								fontSize: '18px'
						   }
				},
				tooltip: {
					headerFormat: '',
					pointFormat: '<span style="color:{point.color}">\u25CF</span> <b> {point.custom}</b> <p> {point.name}</p> <br/>' +
						'Alarma: <b>{point.y}</b> <p>incidents</p>'					
				},
				
				credits: {
					enabled: false
				},
				plotOptions: {				 
					  pie: {
						allowPointSelect: true,
						cursor: 'pointer',            
						dataLabels: {
							enabled: true,
							style: {
								fontSize: '16px'
							},
							format: '<b>{point.name}</b><br>{point.y}',
							distance: 0,
							filter: {
								property: 'percentage',
								operator: '>',
								value: 4
							}
						}
					}
				},
				series: [{
					minPointSize: 10,
					innerSize: '50%',
					zMin: 0,
					data: Complete_Data
				}]
			});		
		
		});
	},300);
    
    
});


/*******Triggers*******/

//Monitoring Changes in Date Picker Initial Date
webMI.trigger.connect("com.atvise.datepicker_Initial_Date", function (e) {
	from=new Date(e.value);
	Chart_Update();
});

//Monitoring Changes in Date Picker Final Date
webMI.trigger.connect("com.atvise.datepicker_Final_Date", function (e) {
	to=new Date(e.value);
	Chart_Update();
});


//Subscribe to alarm
setTimeout(function(){
	webMI.alarm.subscribe(Alarms, function(e) {
		if(Real_Time){
			var value = e.ActiveStateId;
			var indice=Alarms.findIndex(element => element == e.address); //Find the alarm that went off
		
			//If it is active
			if (value){    
				if (chart_1!=undefined){		
					Monitor_Alarms(Alarms,from,new Date(),function(count) {
						var SeriesA=chart_1.series[0];					
						SeriesA.data[indice].update(count[indice]);									
					});				
				}
			}
		}	
	});
},300);

/*******Menu Section*******/

//Real Time
webMI.addEvent(Click_Area[0], "click", function(e) {

	webMI.gfx.setFill(Backgrounds[0], Color);
	webMI.gfx.setFill(Backgrounds[1], "#000000");
    webMI.gfx.setVisible("Date_Selection", false);
    Real_Time=true;
    
    //Update Time
    to = new Date(); //Miliseconds until now
	from=new Date(to-range_mili);
	
	//DatePicker Configuration
	webMI.trigger.fire("com.atvise.datepicker_Initial_Date", from.getTime()); //Initialize Start Date (1 day ago)
	webMI.trigger.fire("com.atvise.datepicker_Final_Date", to.getTime()); //Initialize End Date   
    
    //Update Chart
    chart_1.update({
		title: {text: 'Ultimas 24h'},
	});
});

//Histotical Data
webMI.addEvent(Click_Area[1], "click", function(e) {

	webMI.gfx.setFill(Backgrounds[1], Color);
	webMI.gfx.setFill(Backgrounds[0], "#000000");
    webMI.gfx.setVisible("Date_Selection", true);
    Real_Time=false;
      
    //Update Chart
    chart_1.update({
		title: {text: 'Last 24h'},
	});
});




/*******Auxiliary Functions*******/

//Function that updates the entire graph
function Chart_Update(){
	if (chart_1!=undefined){
		Monitor_Alarms(Alarms,from,new Date(),function(count) {
		
			//Prepare Data
			 var Complete_Data=new Array();
			 
			 for (var i=0; i<count.length; i++){
				var Namei= Alarms[i].split('.');
				Complete_Data.push({
					name: Namei.pop(),
					custom: Namei[Namei.length - 2],
					color:Colors[i],
					y: count[i],			
				});
			 }	
			
			var minutes=(to.getTime()-from.getTime())/(1000*60);	
			
			//Update Chart
			chart_1.update({
				title: {text: 'Last '+ minutes.toFixed(2)+ " minutes"},
				series: [{
						minPointSize: 10,
						innerSize: '50%',
						zMin: 0,
						data: Complete_Data
				}]
			}); 							
		});
	}	
}

//Function that prepares alarm data
function Monitor_Alarms(Alarms,from,to,callback){		
	
	//Prepare addresses for the filter
	var address=new Array();
	var count=new Array(); //Carries the number of occurrences of each alarm
	for (var i=0; i<Alarms.length; i++){	
		address.push("g:"+Alarms[i]);		
		count.push(0);
	}
	
	///////////////Request Alarm data
	
	var filter2 = {};
	filter2.type = ["v:2"]; //Raw Alarm Data
	filter2.address = [address]; //Bring all data
	filter2.timestamp = ["n:>=" + from.getTime() + "<" + to.getTime()];
	
	setTimeout(function(){ //Give the historian time
	
		//Bring the alarm information
		webMI.data.queryFilter(filter2, function(e) {	
		
			//Raw data
			var result = e.result; 
			for(i=0; i<count.length; i++){ //For each count
				for (j=0; j<result.length; j++){
					
					if(result[j].ActiveStateId && result[j].address==Alarms[i]){ //If the alarm is active and it is from the address
						count[i]=count[i]+1; //Corresponding alarm counts and saves it
					}				
				}	
			}
			//Execute callback function
			callback(count);				
		});	
	},750);
}


]]></script>
</svg>
