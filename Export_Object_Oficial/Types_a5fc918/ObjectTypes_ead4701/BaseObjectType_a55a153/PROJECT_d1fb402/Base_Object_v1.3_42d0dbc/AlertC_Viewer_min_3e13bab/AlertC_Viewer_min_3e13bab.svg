<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="230" version="1.2" width="740" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="optional" defaultvalue="SYSTEM.GLOBALS.Color_Global_1" desc="Color" name="Color" substitute="$Color$" valuetype="global"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="true" height="10" width="10"/>
 </metadata>
 <svg atv:refpx="370" atv:refpy="115" height="230" id="id_1" width="740" x="0" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.Objetos_Mantenimiento.table_alarm" y="0">
  <atv:argument name="tableID" value="AlertC_Table"/>
  <atv:argument name="globalBorderColor" value="SYSTEM.GLOBALS.Color_Global_1"/>
  <atv:argument name="globalFillColor" value="SYSTEM.GLOBALS.Color_Global_1"/>
  <atv:argument name="globalFontColor" value="SYSTEM.GLOBALS.atvFontColor2"/>
 </svg>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[//Defino Variables
var self;
var tableData = [];
var data_lista=[];



/*******Condiciones Iniciales*******/
webMI.addOnload(function() {

	
});

/*******Codigo de Tabla HTML********/
webMI.table.loadResources(function () {

	/* Create the configuration */
	var config = [];

	/* Configuration of the columns to be displayed */
	config["columns"] =
		[
			{   id: "Alert", name: "Alert", field: "Alert", sortable: false, filter: false, visible: true, width:170},
			{   id: "Status", name: "Status", field: "Status", sortable: false, filter: false, visible: false},
			{	id: "Value", name: "Value", field: "Value", sortable: false, filter: false, visible: true, width:15},
			
			{   id: "Timestamp", name: "Timestamp", field: "Timestamp", sortable: false, filter: true},
			
			{   id: "Text", name: "Text", field: "Text", sortable: false, filter: true},
		];

	/* Configuration of the runtime behavior */
	config["mode"] = "live";
	
	/* Configuration of the data query */
	config["dataRequestFunction"] =
		function customDataRequest(continuation) {
			self = this;
			webMI.data.read(webMI.query["base"]+".Alert_Active", function(e){
				//console.log(webMI.query["base"]+".Alarm_Activos");
				//console.log(e.value);
			    var result=e.value;	 			    
			    for (var i=0; i<result.length; i++){
					const myArray = JSON.parse(result[i]);
					if (myArray.Status=="Increasing"&&myArray.Condition_type=="Min"){
						data_lista.push({
							"Alert": myArray.Alert,
							"Status":myArray.Status,
							"Value":myArray.value,
							"Timestamp":(new Date(myArray.Timestamp).toString()).slice(0,-33),
							"Text":myArray.eventText,	
						});	
					}					    
				}
				var data = {};
				data.result= data_lista;
				tableData.push(data);
				self.addData(data);
			});					
		};
		

	/* Registration of the configuration */
	webMI.table.register("AlertC_Table", "config",  config);
	webMI.table.setReady("AlertC_Table", "config");
});




]]></script>
</svg>
