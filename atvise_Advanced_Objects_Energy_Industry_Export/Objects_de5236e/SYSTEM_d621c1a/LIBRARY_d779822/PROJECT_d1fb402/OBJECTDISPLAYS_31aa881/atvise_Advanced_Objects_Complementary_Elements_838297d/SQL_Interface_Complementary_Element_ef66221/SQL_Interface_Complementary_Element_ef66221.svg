<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="890" version="1.2" width="1675" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="optional" config="MySQL;SQL_Express;MariaDB" defaultvalue="MySQL" desc="Database Type" group="Config" name="Database_Type" valuetype="enum"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Database Table Name" group="Config" name="Database_Table" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MySQL DNS" group="MySQL Config" name="MySQL_DNS" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MySQL Uid" group="MySQL Config" name="MySQL_Uid" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MySQL Pwd" group="MySQL Config" name="MySQL_Pwd" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MariaDB Driver" group="MariaDB Config" name="MariaDB_Driver" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MariaDB TCPIP" group="MariaDB Config" name="MariaDB_TCPIP" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MariaDB Database" group="MariaDB Config" name="MariaDB_Database" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MariaDB UID" group="MariaDB Config" name="MariaDB_UID" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MariaDB PWD" group="MariaDB Config" name="MariaDB_PWD" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="MariaDB PORT" group="MariaDB Config" name="MariaDB_PORT" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="SQLExpress Driver" group="SQLExpress Config" name="SQLExpress_Driver" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="SQLExpress Server" group="SQLExpress Config" name="SQLExpress_Server" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="SQLExpress Database" group="SQLExpress Config" name="SQLExpress_Database" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="SQLExpress UID" group="SQLExpress Config" name="SQLExpress_UID" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="SQLExpress PWD" group="SQLExpress Config" name="SQLExpress_PWD" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="1000" desc="maxRows" group="File" name="maxRows" valuetype="number"/>
  <atv:parameter behavior="optional" defaultvalue="true" desc="Time Filter Active" group="Time" name="Time_Filter_Active" valuetype="bool"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="TimeColumnName" group="Time" name="TimeColumnName" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="DD/MM/YYYY HH:mm" desc="DateFormat" group="Time" name="DateFormat" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="10000" desc="Update Time (mS)" group="Time" name="Update_Time" valuetype="number"/>
  <atv:parameter behavior="optional" defaultvalue="SYSTEM.GLOBALS.Color_Global_1" desc="Color" group="Appereance" name="Color" substitute="$Color$" valuetype="global"/>
  <atv:parameter behavior="optional" defaultvalue="16" desc="Font_Size" group="Appereance" name="Font_Size" substitute="$Font_Size$" valuetype="number"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="true" height="5" width="5"/>
 </metadata>
 <svg atv:refpx="837.46" atv:refpy="530.91" height="230" id="id_4" transform="matrix(2.2635,0,0,3,0,0)" width="740" x="0" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.atvise_Advanced_Objects_Complementary_Elements.Alarm_Table_Complementary_Element" y="65">
  <atv:argument name="tableID" value="SQLInterface"/>
  <atv:argument name="globalBorderColor" prefix="Color" value="SYSTEM.GLOBALS."/>
  <atv:argument name="globalFillColor" prefix="Color" value="SYSTEM.GLOBALS."/>
  <atv:argument name="globalFontColor" value="SYSTEM.GLOBALS.atvFontColor2"/>
  <atv:argument name="row_text_size" prefix="Font_Size" value=""/>
  <atv:argument name="detail_text_size" prefix="Font_Size" value=""/>
  <atv:argument name="footer_text_size" prefix="Font_Size" value=""/>
  <atv:argument name="row_height" value="25"/>
  <atv:argument name="filterBar" value="false"/>
 </svg>
 <line atv:refpx="842.5" atv:refpy="160" id="id_3" stroke="$Color$" stroke-width="2" x1="5" x2="1680" y1="160" y2="160"/>
 <g atv:refpx="492.505" atv:refpy="108.96" id="Date_Selection" transform="matrix(1,0,0,1,-60,55)">
  <svg atv:refpx="392.478" atv:refpy="70.416" height="30" id="id_2" transform="matrix(1.7188,0,0,1.1667,0,0)" width="160" x="157.088" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" y="49.644">
   <atv:argument name="fontSize" value="20"/>
   <atv:argument name="name" value="CSV_Initial_Date"/>
   <atv:overwrite id="button_stroke" transform="matrix(0.5818,0,0,0.8571,0,0)" x="250.508" y="7.501"/>
   <atv:overwrite id="id_1" transform="matrix(0.5236,0,0,0.7714,0,0)" x="279.454" y="9.445"/>
   <atv:overwrite id="button_bg" transform="matrix(0.5818,0,0,0.8571,0,0)" x="250.508" y="7.501"/>
   <atv:overwrite id="datepicker_label" transform="matrix(0.5818,0,0,0.8571,0,0)" x="240.508" y="22.751"/>
   <atv:overwrite height="31.001" id="focus_frame" transform="matrix(0.5818,0,0,0.8571,0,0)" width="271.008"/>
   <atv:overwrite height="27.001" id="blinking_frame" transform="matrix(0.5818,0,0,0.8571,0,0)" width="243.008"/>
   <atv:overwrite height="27.001" id="input_bg" transform="matrix(0.5818,0,0,0.8571,0,0)" width="243.008"/>
   <atv:overwrite height="33.001" id="id_0" transform="matrix(0.5818,0,0,0.8571,0,0)" width="273.008"/>
   <atv:overwrite height="35.001" id="id_2" transform="matrix(0.5818,0,0,0.8571,0,0)" width="275.008"/>
  </svg>
  <text atv:refpx="300.733" atv:refpy="36" fill="$Color$" font-family="Arial" font-size="24" id="id_0" x="274.5" y="40.5">Intial Date</text>
  <svg atv:refpx="682.479" atv:refpy="65.416" height="30" id="id_15" transform="matrix(1.7188,0,0,1.1667,0,0)" width="160" x="325.81" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.picker_date" y="49.644">
   <atv:argument name="fontSize" value="20"/>
   <atv:argument name="name" value="CSV_Final_Date"/>
   <atv:overwrite id="button_stroke" transform="matrix(0.5818,0,0,0.8571,0,0)" x="250.508" y="7.501"/>
   <atv:overwrite id="id_1" transform="matrix(0.5236,0,0,0.7714,0,0)" x="279.454" y="9.445"/>
   <atv:overwrite id="button_bg" transform="matrix(0.5818,0,0,0.8571,0,0)" x="250.508" y="7.501"/>
   <atv:overwrite id="datepicker_label" transform="matrix(0.5818,0,0,0.8571,0,0)" x="240.508" y="22.751"/>
   <atv:overwrite height="31.001" id="focus_frame" transform="matrix(0.5818,0,0,0.8571,0,0)" width="271.008"/>
   <atv:overwrite height="27.001" id="blinking_frame" transform="matrix(0.5818,0,0,0.8571,0,0)" width="243.008"/>
   <atv:overwrite height="27.001" id="input_bg" transform="matrix(0.5818,0,0,0.8571,0,0)" width="243.008"/>
   <atv:overwrite height="33.001" id="id_0" transform="matrix(0.5818,0,0,0.8571,0,0)" width="273.008"/>
   <atv:overwrite height="35.001" id="id_2" transform="matrix(0.5818,0,0,0.8571,0,0)" width="275.008"/>
  </svg>
  <text atv:refpx="590.763" atv:refpy="36" fill="$Color$" font-family="Arial" font-size="24" id="id_16" x="564.5" y="40.5">Final Date</text>
 </g>
 <rect atv:refpx="60" atv:refpy="110" fill="#000000" height="40" id="background_play" stroke="none" stroke-width="2" width="40" x="40" y="90"/>
 <rect atv:refpx="110" atv:refpy="110" fill="#000000" height="40" id="background_history" stroke="none" stroke-width="2" width="40" x="90" y="90"/>
 <svg atv:refpx="110" atv:refpy="110" height="20" id="id_7" transform="matrix(2,0,0,2,0,0)" width="20" x="45" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.history" y="45">
  <atv:argument name="symbolColor" value="#ffffff"/>
 </svg>
 <rect atv:refpx="110" atv:refpy="110" fill="#000000" fill-opacity="0" height="40" id="click_area_history" stroke="none" stroke-width="2" width="40" x="90" y="90"/>
 <svg atv:refpx="60" atv:refpy="110" height="20" id="id_8" transform="matrix(2,0,0,2,0,0)" width="20" x="20" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Symbols.20x20.play" y="45">
  <atv:argument name="symbolColor" value="#ffffff"/>
 </svg>
 <rect atv:refpx="60" atv:refpy="110" fill="#000000" fill-opacity="0" height="40" id="click_area_play" stroke="none" stroke-width="2" width="40" x="40" y="90"/>
 <text atv:refpx="126.413" atv:refpy="39" fill="$Color$" font-family="Arial" font-size="34" id="id_9" x="25" y="51.5">SQL Interface</text>
 <svg atv:refpx="1252.5" atv:refpy="115" height="40" id="id_5" transform="matrix(1.9125,0,0,1.5,0,0)" width="400" x="454.902" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.atvise_Advanced_Objects_Complementary_Elements.Text_Area_Complementary_Element" y="56.667">
  <atv:argument name="Name" value="SQL_Interface"/>
  <atv:argument name="Alignment" value="left"/>
  <atv:argument name="Border_Thickness" value="0"/>
  <atv:argument name="Font_Color" value="$Color$"/>
 </svg>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[//---------------Initialize Variables---------//

//---------Internal

//Table Variables
var self;
var Global_Data;
var tableData = [];
var Table_Data=[];
var Ready_Data=[];
var item; //Variable for current maintenance info
var Table_Id;
var Final_Date;
var Initial_Date;

//Index
var Table_Initialized=false;
var tableController;
var Action="Add";
var New_Values;
var New_Value;
var Keys=["ID"]; 
var Columns_ConfigI=[{   id: "ID", name: "ID", field: "ID", sortable: false, filter: false, visible: true, width:10}];

//Menu
var Backgrounds=["background_play","background_history"];
var Click_Area=["click_area_play","click_area_history"];
var Real_Time=true; //Comienza en tiempo real

//-------External
var Database_Type=webMI.query["Database_Type"];
var Database_Table=webMI.query["Database_Table"];

//MySQL Config Settings
var MySQL_DNS=webMI.query["MySQL_DNS"];
var MySQL_Uid=webMI.query["MySQL_Uid"];
var MySQL_Pwd=webMI.query["MySQL_Pwd"];

//MariaDB Config Settings
var MariaDB_Driver=webMI.query["MariaDB_Driver"];
var MariaDB_TCPIP=webMI.query["MariaDB_TCPIP"];
var MariaDB_Database=webMI.query["MariaDB_Database"];
var MariaDB_UID=webMI.query["MariaDB_UID"];
var MariaDB_PWD=webMI.query["MariaDB_PWD"];
var MariaDB_PORT=webMI.query["MariaDB_PORT"];

//SQLExpress Config Settings
var SQLExpress_Driver=webMI.query["SQLExpress_Driver"];
var SQLExpress_Server=webMI.query["SQLExpress_Server"];
var SQLExpress_Database=webMI.query["SQLExpress_Database"];
var SQLExpress_UID=webMI.query["SQLExpress_UID"];
var SQLExpress_PWD=webMI.query["SQLExpress_PWD"];


var maxRows=webMI.query["maxRows"];
var DateFormat=webMI.query["DateFormat"];
var Time_Filter_Active=webMI.query["Time_Filter_Active"];
var TimeColumnName=webMI.query["TimeColumnName"];
var Update_Time=webMI.query["Update_Time"];
var File_Name_Trigger=webMI.query["File_Name_Trigger"];
var Color=webMI.query["Color"];

//Confirmation Window Variables
var Action_Trigger_Name="Change_Global_Maintenance";
var Confirmation_Text;

//---------------Initial Conditions---------//
var connectionString;


webMI.addOnload(function() {
	
	
	
	//Build Connection String
	connectionString=generateODBCConnectionString(Database_Type);

	 //Start with Hidden Date Selection
    webMI.gfx.setFill(Backgrounds[0], Color);
    webMI.gfx.setVisible("Date_Selection", false);
    console.log(Time_Filter_Active);
    if (Time_Filter_Active=="false"||TimeColumnName==undefined){
		console.log("Hidding");
		webMI.gfx.setVisible("background_history", false);
		webMI.gfx.setVisible("id_7", false);
		webMI.gfx.setVisible("click_area_history", false);
    }
    
    //Write value to the element remotely
	webMI.trigger.fire("write_value_SQL_Interface", {value:String("Reading: "+maxRows+" rows from "+Database_Table+" in a "+Database_Type+ "Database in Real Time every: "+(Update_Time/1000)+"s")}); 
    
	//Prepare data
	PrepareData(function (e){     
	 (async () => {
		 await waitForCondition();		
				webMI.trigger.fire("update_mant_table", 0); //Update table				
		})();
	});


});



//---------------Trigger Section--------------//

//Monitor File_Name_Trigger for external object displays
webMI.trigger.connect("Update File Name"+File_Name_Trigger, function (e) {

	File_Name=e;
	
});


//Monitor Initial Date  
webMI.trigger.connect("com.atvise.datepicker_CSV_Initial_Date", function (e) {
	Initial_Date=new Date(e.value);
	if(Table_Initialized &&  Real_Time==false){
		webMI.trigger.fire("update_mant_table", 0); //Update chart
	}
});


//Monitor Final Date
webMI.trigger.connect("com.atvise.datepicker_CSV_Final_Date", function (e) {
	setTimeout(function() {
		Final_Date=new Date(e.value);	
		if(Table_Initialized &&  Real_Time==false){
			webMI.trigger.fire("update_mant_table", 0); //Update chart
		}
	},200);
});


//Real Time
webMI.addEvent(Click_Area[0], "click", function(e) {
	
	if (Time_Filter_Active=="true"&&TimeColumnName!=undefined){
		webMI.gfx.setFill(Backgrounds[0], Color);
		webMI.gfx.setFill(Backgrounds[1], "#000000");
		webMI.gfx.setVisible("Date_Selection", false);
		Real_Time=true;
		//Update Text
		webMI.trigger.fire("write_value_SQL_Interface", {value:String("Reading: "+maxRows+" rows from "+Database_Table+" in a "+Database_Type+ "Database in Real Time every: "+(Update_Time/1000)+"s")}); 
    }
    else if (Time_Filter_Active=="false"||TimeColumnName==undefined){
		Real_Time=!Real_Time;
		if (Real_Time==true){  
			webMI.gfx.setFill(Backgrounds[0], Color);
			//Update Text
			webMI.trigger.fire("write_value_SQL_Interface", {value:String("Reading: "+maxRows+" rows from "+Database_Table+" in a "+Database_Type+ "Database in Real Time every: "+(Update_Time/1000)+"s")}); 
		}
		else if (Real_Time==false){  
			webMI.gfx.setFill(Backgrounds[0], "#000000");
			//Update Text
			webMI.trigger.fire("write_value_SQL_Interface", {value:String("Reading: "+maxRows+" rows from "+Database_Table+" in a "+Database_Type+ "Database")}); 
		}
		
    }
  
	//Update Table
    if(Table_Initialized){
		//Prepare data
		PrepareData(function (e){		 
			webMI.trigger.fire("update_mant_table", 0); //Update table
		});
	}
});

//Histotical Data
webMI.addEvent(Click_Area[1], "click", function(e) {

	webMI.gfx.setFill(Backgrounds[1], Color);
	webMI.gfx.setFill(Backgrounds[0], "#000000");
    webMI.gfx.setVisible("Date_Selection", true);
    Real_Time=false;
    
    //Update Text
			webMI.trigger.fire("write_value_SQL_Interface", {value:String("Reading: "+maxRows+" rows from "+Database_Table+" in a "+Database_Type+ "from "+Initial_Date+ "to "+Final_Date)}); 
      
    //Update Table
    if(Table_Initialized){
		//Prepare data
		PrepareData(function (e){		 
			webMI.trigger.fire("update_mant_table", 0); //Update table
		});
	}
});


//Monitor change agreement
webMI.trigger.connect(Action_Trigger_Name, function(e) {
	var text=e.value;	
	
	//Excecute action
	//modifyElement(Global_List_Address,Action,Modify_Index,New_Values);
});

//Update when it is in real time
setInterval(function(){
	if(Table_Initialized && Real_Time==true){
		//Prepare data
		PrepareData(function (e){		 
			webMI.trigger.fire("update_mant_table", 0); //Update table
		});
	}
},Update_Time);



//---------------Table Section--------------//
(async () => {
	await waitForCondition2();
	webMI.table.loadResources(function () {
	
		// Create the configuration //
		var config = [];
	
		// Configuration of the columns to be displayed //		
		config["columns"] = Columns_ConfigI;					
		
		
		// Configuration of the runtime behavior //
		config["mode"] = "live";
		
		
		
		// Configuration of the data query //
		config["dataRequestFunction"] =
			function customDataRequest(continuation) {
				self = this;
				tableController = webMI.table.request("SQLInterface", "controller");
				console.log("Columns_ConfigI");
				console.log(Columns_ConfigI);
				webMI.trigger.connect("update_mant_table", function (h) {
				
					Table_Initialized=true;
					
					//------------Bring data from historian-----------//			
					
					//Filter Config
					Table_Data=[];
					Ready_Data=[];
					
					var TimeII;
					var TimeFI;
					
					//Extract Data from Global_Data				
					for (const i in Global_Data) {
						if (Global_Data.hasOwnProperty(i)) {
							if (Time_Filter_Active=="true"&&TimeColumnName!=undefined){
								TimeII=(new Date(parseDateString(Global_Data[i][TimeColumnName],DateFormat))).getTime();
								if(TimeII>=Initial_Date && TimeII<=Final_Date){ //It is between the time frame
									Table_Data.push(Global_Data[i]);
								}
							}
							else{
								Table_Data.push(Global_Data[i]);
							}
							
						}
					}				
					//Prepare Ready data									
					for (var i=0; i<Table_Data.length; i++){
						var ObjectI={}
						for (var j=0; j<Keys.length; j++){	
							if (Keys[j]=="ID"){
								ObjectI[String(Keys[j])]=i;
							}
							else{
								ObjectI[Keys[j]]=Global_Data[i][Keys[j]]; 
							}
						}
	
						Ready_Data.push(ObjectI);				
					}					
					var data = {};
					data.result= Ready_Data;
					tableData.push(data);
					tableController.clearData(); //Clear Data
					self.addData(data);				
				});					
			};
			
	
		// Registration of the configuration //
		webMI.table.register("SQLInterface", "config",  config);
		webMI.table.setReady("SQLInterface", "config");
	});
})(); 



//---------------Functions Section--------------//


//Prepare data and time

function PrepareData(callback) {
	//Call Modification Script
    webMI.data.call("SQL_Databse_Interface_webMI_Method_Script", {"ODBCConnectionString":connectionString , "NumberOfRows": maxRows, "Table": Database_Table, "ExplicitSQLFilter": "", "DatabaseType": Database_Type}, function(e) {
		
		console.log(e);
		Global_Data=JSON.parse(e.result);
		console.log(Global_Data);
		
		if (Time_Filter_Active=="true"&&TimeColumnName!=undefined){
			//Date Picker shows current time
			Initial_Date=new Date(parseDateString(Global_Data[1][TimeColumnName],DateFormat));
			Final_Date=new Date(parseDateString(Global_Data[Global_Data.length-1][TimeColumnName],DateFormat));
			webMI.trigger.fire("com.atvise.datepicker_CSV_Initial_Date", Initial_Date.getTime()); 
			webMI.trigger.fire("com.atvise.datepicker_CSV_Final_Date", Final_Date.getTime()); 
		}
		//Prepare Global_Data	
		for (const key in Global_Data[0]) {
			Keys.push(key);
			Columns_ConfigI.push({id: String(key) , name: String(key), field: String(key), sortable: false, filter: false, visible: true, width:200})
		}
		
		callback(); 
	});
}


//Wait for data to be ready
function waitForCondition() {
  return new Promise((resolve) => {
    const interval = setInterval(() => {
	var condition=((Initial_Date!=undefined||Time_Filter_Active=="false")&&tableController!=undefined&& Columns_ConfigI.length>1);
      if (condition) {
        clearInterval(interval);
        resolve(true);
      }
    }, 100);
  });
}
function waitForCondition2() {
  return new Promise((resolve) => {
    const interval = setInterval(() => {
	var condition=((Initial_Date!=undefined||Time_Filter_Active=="false")&&Global_Data!=undefined&& Columns_ConfigI.length>1);
      if (condition) {
        clearInterval(interval);
        resolve(true);
      }
    }, 100);
  });
}

function parseDateString(dateStr, formatStr) {
    // Mapping textual month names to numeric values
    const monthNames = {
        Jan: '01', Feb: '02', Mar: '03', Apr: '04', May: '05', Jun: '06',
        Jul: '07', Aug: '08', Sep: '09', Oct: '10', Nov: '11', Dec: '12'
    };

    // Default date and time values
    var day = '01', month = '01', year = '1970';
    var hour = '00', minute = '00', second = '00', millisecond = '00';

    // Extracting date and time components based on the format string
    // Adjusting the split regex to include potential textual content for months
    dateStr.split(/[\s]+/).forEach((value, index) => {
        // Using the format part from the original function for consistency
        var formatPart = formatStr.split(/[\s\/:]+/)[index];
        if (index === 0 && isNaN(Date.parse(value))) {
            // Assuming the first part is day of the week and skipping it
            return;
        }
        if (monthNames[value]) {
            // If the value is a month name, convert it to its numeric counterpart
            month = monthNames[value];
        } else {
            // Otherwise, process as before
            if (formatPart === 'DD') day = value;
            if (formatPart === 'YYYY') year = value;
            if (formatPart === 'HH') hour = value;
            if (formatPart === 'mm') minute = value;
            if (formatPart === 'ss') second = value;
            if (formatPart === 'ms') millisecond = value;
        }
    });

    // Convert to MM/DD/YYYY HH:mm:ss.ms format and return as a Date object
    var newDateStr = `${month}/${day}/${year} ${hour}:${minute}:${second}.${millisecond}`;
    return new Date(newDateStr);
}

//Function to Generate Connection String
function generateODBCConnectionString(Database_Type) {

  // Utility function to double backslashes
  function doubleBackslashes(inputString) {
    return inputString.replace(/\\/g, '\\');
  }

  // Generate connection string based on the database type
  switch (Database_Type) {
    case "MySQL":
      return `DSN=${MySQL_DNS}; Uid=${MySQL_Uid}; Pwd=${MySQL_Pwd};`;
    case "MariaDB":
      return `DRIVER={${MariaDB_Driver}};TCPIP=${MariaDB_TCPIP};Database=${MariaDB_Database};UID=${MariaDB_UID};PWD=${MariaDB_PWD};PORT=${MariaDB_PORT}`;
    case "SQL_Express":
      // Ensure backslashes are doubled in the server parameter
      const doubledServer = doubleBackslashes(SQLExpress_Server);
      return `Driver={${SQLExpress_Driver}};Server=${doubledServer};Database=${SQLExpress_Database};UID=${SQLExpress_UID};PWD=${SQLExpress_PWD};`;
    default:
      return "Unsupported database type.";
  }
}



]]></script>
</svg>
