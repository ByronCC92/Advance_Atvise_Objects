<?xml version="1.0" encoding="UTF-8"?>
<script>
  <metadata>
    <priority>0</priority>
    <help/>
  </metadata>
  <code><![CDATA[
/**
 * This script handles the status indicators.
 */


/**
 * DECLARATION SECTION
 */
var currentIndicator = "";
var activeIndicators = {};


/**
 * FUNCTION SECTION
 */
function handleStatus(status) {
	if (statusEnabled != "Yes")
		return;

	if (statusTrigger != "") {
		webMI.trigger.fire(statusTrigger, status);
	} else {
		if (typeof statusIndication["ItemStatusBad"] == "undefined")
			statusIndication = {"ItemStatusBad": {color: "#ffff00", interval: "250"}};

		if (isGood(status))				//Good value state
			delete activeIndicators["status"];
		else if (isBad(status))			//Bad value state
			activeIndicators["status"] = {
				color: statusIndication["ItemStatusBad"].color,
				interval: parseInt(statusIndication["ItemStatusBad"].interval)
			};
		else if (isUncertain(status))	//Uncertain value state
			activeIndicators["status"] = {
				color: statusIndication["ItemStatusBad"].color,
				interval: parseInt(statusIndication["ItemStatusBad"].interval)
			};
		else							//Unknown value state
			activeIndicators["status"] = {
				color: statusIndication["ItemStatusBad"].color,
				interval: parseInt(statusIndication["ItemStatusBad"].interval)
			};

		if (typeof customSetIndicator === "function") customSetIndicator();
		else setIndicator(isGood(status));
	}
}

/**
 * Alarm handling
 * @param address
 */
function initAlarm(address) {
	alarmReadGranted();

	function alarmReadGranted() {
		if (alarmIndication == "")
			alarmIndication = {};

		if (typeof alarmIndication["AlarmStatusOnUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnUnacknowledged"] = {color: "#ff0000", interval: "250"};

		if (typeof alarmIndication["AlarmStatusOnAcknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnAcknowledged"] = {color: "#ff0000", interval: "500"};

		if (typeof alarmIndication["AlarmStatusOffUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOffUnacknowledged"] = {color: "#ff0000", interval: "750"};

		if (typeof alarmIndication["AlarmStatusOnOffUnacknowledged"] == "undefined")
			alarmIndication["AlarmStatusOnOffUnacknowledged"] = {color: "#ff0000", interval: "1500"};

		webMI.alarm.subscribe(address, function (e) {
			if (e.error === -4) {
				// Bad user access denied!
				if (typeof accessControlElementNotifier != "undefined" && accessControlElementNotifier) {
					accessControlElementNotifier.addRights(e.address, "read");
				}
			}

			if (e.state == 1) {
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOnUnacknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOnUnacknowledged"].interval)
				};
			} else if (e.state == 2) {
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOnAcknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOnAcknowledged"].interval)
				};
			} else if (e.state == 3) {
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOffUnacknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOffUnacknowledged"].interval)
				};
			} else if (e.state == 5) {
				activeIndicators["alarm"] = {
					color: alarmIndication["AlarmStatusOnOffUnacknowledged"].color,
					interval: parseInt(alarmIndication["AlarmStatusOnOffUnacknowledged"].interval)
				};
			} else {
				delete activeIndicators["alarm"];
			}

			if (typeof customSetIndicator === "function") customSetIndicator();
			else setIndicator(e.state == 0);
		});
	}
}

/**
 * Set indicator
 */
var activeIndicator = "";
var activeIndicatorColor = null;
var activeIndicatorCurrent = "";
var activeIndicatorID = null;
var activeIndicatorInterval = null;
var activeIndicatorLock = false;
var activeIndicatorState = false;
var activeIndicatorStateChanged = false;
var activeIndicatorTimer = 0;
var activeIndicatorHeartBeat = 50;

function setIndicator() {
	if (activeIndicators["trigger"]) {
		activeIndicator = "trigger";
	} else if (activeIndicators["status"]) {
		activeIndicator = "status";
	} else if (activeIndicators["alarm"]) {
		activeIndicator = "alarm";
	} else {
		activeIndicator = "";
	}

	var indicatorChange = false;
	if (activeIndicator) {
		if (activeIndicator != activeIndicatorCurrent)
			indicatorChange = true;
		if (activeIndicatorInterval != activeIndicators[activeIndicator].interval)
			indicatorChange = true;
		if (activeIndicatorColor != activeIndicators[activeIndicator].color)
			indicatorChange = true;
	}

	if (activeIndicator && indicatorChange) {

		activeIndicatorColor = activeIndicators[activeIndicator].color;
		activeIndicatorCurrent = activeIndicator;
		activeIndicatorInterval = activeIndicators[activeIndicator].interval;
		activeIndicatorState = false;

		if (typeof webMI.gfx.getX("gauge_value") == "undefined") {
			webMI.gfx.setStroke("blinking_frame", activeIndicatorColor);
		} else {
			webMI.gfx.setFill("blinking_frame", activeIndicatorColor);
		}

	} else if (!activeIndicator) {
		activeIndicatorInterval = null;
		activeIndicatorCurrent = activeIndicator;
	}

	activeIndicatorStateChanged = true;

	return;
}

/**
 * [AT-D-12401] Interval for managing the blinking as an extension for setIndicator
 * @type {number}
 */
var activeIndicatorID = setInterval(function activeIndicatorBeat() {

	if (activeIndicatorStateChanged && activeIndicatorInterval == null) {
		webMI.gfx.setVisible("blinking_frame", false);
	} else if (activeIndicatorInterval == 0) {
		webMI.gfx.setVisible("blinking_frame", "visible");
	} else {
		if (activeIndicatorInterval == null)
			return;

		if (activeIndicatorTimer <= 0) {
			if (activeIndicatorState) {
				webMI.gfx.setVisible("blinking_frame", false);
				activeIndicatorState = false;
			} else {
				webMI.gfx.setVisible("blinking_frame", "visible");
				activeIndicatorState = true;
			}
			activeIndicatorTimer = activeIndicatorInterval;
		} else {
			activeIndicatorTimer = activeIndicatorTimer - activeIndicatorHeartBeat;
		}
	}

	activeIndicatorStateChanged = false;

}, activeIndicatorHeartBeat);


function isUndefined(status) {
	return typeof status === "undefined";
}

function isGood(status) {
	return !isUndefined(status) && (status == 0 || (status & 0xC0000000).toString(16) == 0);
}

function isUncertain(status) {
	return !isUndefined(status) && ((status & 0xC0000000).toString(16) == 40000000);
}

function isBad(status) {
	return !isUndefined(status) && ((status & 0x80000000).toString(16) != 0);
}

webMI.addOnunload(function () {
	clearInterval(activeIndicatorInterval);
});


/**
 * TRIGGER SECTION
 */
webMI.trigger.connect("com.atvise.setBlinking", function (e) {
	if (e.value == "none") {
		delete activeIndicators["trigger"];
	} else {
		activeIndicators["trigger"] = {color: e.value, interval: 500};
	}
	if (typeof customSetIndicator === "function") customSetIndicator();
	else setIndicator();
});

/**
 * This script is used for handling the user rights set by display paraemters and the server based access control rights.
 * The in_out_value object display's right handling works slightly different and does not use this script.
 */

/**
 * DECLARATION SECTION
 */

var right = null;
var isActivationNodeSet = false;
var nodeIsActive = false;
var hasRight = false;
var accessControlRights = {};
accessControlRights["baseWrite"] = true;
accessControlRights["activeNodeRead"] = true;
var accessControlElementNotifier;

/**
 * FUNCTION SECTION
 */

function rightsHandling(rightsHandlingProperties) {
	right = rightsHandlingProperties.right;
	var checkBaseNodeWriteRight = rightsHandlingProperties.checkBaseNodeWriteRight;
	isActivationNodeSet = rightsHandlingProperties.isActivationNodeSet;
	var notifierConfiguration = rightsHandlingProperties.notifierConfiguration;
	var setActiveTrigger = rightsHandlingProperties.setActiveTrigger;
	var callHandleStatus = rightsHandlingProperties.handleStatus;

	if (right != null) {
		if (right.search(/SYSTEM\.SECURITY\.RIGHTS\./) != -1) {
			right = right.substring(23, right.length); //remove "prefix" SYSTEM.SECURITY.RIGHTS.
		}

		if (right != "") {
			webMI.addEvent(webMI.data, "clientvariableschange", function (e) {
				hasRight = false;
				if ("username" in e && e.username != "") {
					hasRight = webMI.hasRight(right);
				}
				setActivation();
			});
		}
	}

	if (isActivationNodeSet) {
		webMI.data.subscribe(activeNode, function (e) {
			var nodeActiveValue = e.value;
			if (typeof nodeActiveValue == "boolean") {
				nodeIsActive = String(nodeActiveValue) == activeValue;
			} else if (typeof nodeActiveValue == "number") {
				try {
					var temp = parseFloat(activeValue);
					nodeIsActive = nodeActiveValue == temp;
				} catch (e) {
					nodeIsActive = false;
				}
			} else {
				nodeIsActive = nodeActiveValue == activeValue;
			}
			if (callHandleStatus && typeof e.status != "undefined" && typeof handleStatus === "function")
				handleStatus(e.status);
			setActivation();
		});
	} else {
		setActivation();
	}

	if (setActiveTrigger) {
		webMI.trigger.connect("com.atvise.setActive", function (e) {
			if (typeof isSetActive != "undefined") {
				isSetActive = e.value;
				setActivation();
			} else if (e.value) {
				setActivation();
			} else {
				setActivation(true);
			}
		});
	}

	accessControlHandling(checkBaseNodeWriteRight, isActivationNodeSet, notifierConfiguration);
}

function accessControlHandling(checkBaseNodeWriteRight, isActivationNodeSet, notifierConfiguration) {
	if (!webMI.getAccessControlSupport()) return false;

	var accessControlManager;

	if (checkBaseNodeWriteRight || isActivationNodeSet)
		accessControlManager = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Access Control Manager");

	if (notifierConfiguration && notifierConfiguration.id && Array.isArray(notifierConfiguration.rights)) {
	  notifierConfiguration.elementId = notifierConfiguration.id;
		accessControlElementNotifier = webMI.callExtension(
			"SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Access Control Element Notifier",
			notifierConfiguration
		);

    if(accessControlElementNotifier)
      notifierConfiguration.rights.forEach((rightConfig) => {
        if (rightConfig.nodeId) {
          accessControlElementNotifier.addRights(rightConfig.nodeId, rightConfig.rights);
        }
      });
	}

	updateAccessControlRights();

	function updateAccessControlRights() {
		if (checkBaseNodeWriteRight) updateActiveNodeAndBaseRights();
		else if (isActivationNodeSet) updateActiveNodeRightsOnly();
	}

	function updateActiveNodeRightsOnly() {
		accessControlManager.getRights(webMI.query["activeNode"], "read", function (e) {
			accessControlRights["activeNodeRead"] = e.result;
			setActivation();
		});
	}

	function updateActiveNodeAndBaseRights() {
		accessControlManager.getRights(webMI.query["base"], "write", function (e) {
			accessControlRights["baseWrite"] = e.result;
			if (isActivationNodeSet && accessControlRights["baseWrite"] == true) {
				accessControlManager.getRights(webMI.query["activeNode"], "read", function (e) {
					accessControlRights["activeNodeRead"] = e.result;
					setActivation();
				});
			} else {
				setActivation();
			}
		});
	}

	webMI.trigger.connect("com.atvise.access_control_update", function (e) {
		if (e.notification === null) return;
		updateAccessControlRights();
	});
}

function hasReadRightFromDisplayParameters(forceDeActivate) {
	if (typeof forceDeActivate !== "undefined" && forceDeActivate) {
		active = false;
	} else if (right != "") {
		if (isActivationNodeSet && accessControlRights["activeNodeRead"]) {
			active = nodeIsActive && hasRight;
		} else {
			active = hasRight;
		}
	} else {
		if (isActivationNodeSet && accessControlRights["activeNodeRead"]) {
			active = nodeIsActive;
		} else if (isActivationNodeSet && !accessControlRights["activeNodeRead"]) {
			active = false;
		} else {
			active = true;
		}
	}
	if (typeof isSetActive != "undefined") active = active && isSetActive;
	return active;
}

function setActivation(forceDeActivate) {
	if (hasReadRightFromDisplayParameters(forceDeActivate) && accessControlRights["baseWrite"]) {
		setActiveLayout();
	} else {
		setInactiveLayout();
	}
}

/**
 * Code for rocker_switch, rocker_switch_small and rocker_switch_horizontal object displays
 * ----------------------------------------------------------------------------------------
 * This button increments or decrements the value of an address like the button increment/decrement. rocker_switch_small is the smaller representation of the rocker switch. rocker_switch_horizontal is the horizontal representation of the rocker switch.
 * In addition the trigger "valuechanged" with the new value (=incremented or decremented value) will be fired.
 * An additional border indicates the current value's negative state or an additionally defined alarm. The colors and blinking intervals are defined in global lists.
 */


/**
 * DECLARATION SECTION
 */

var base = webMI.query["base"] == undefined ? "" : webMI.query["base"];
var name = webMI.query["name"] == undefined ? "dpt" : webMI.query["name"];
var stepInc = parseFloat(webMI.query["stepInc"]);
var stepDec = parseFloat(webMI.query["stepDec"]);
var min = webMI.query["min"] == undefined ? "" : parseFloat(webMI.query["min"]);
var max = webMI.query["max"] == undefined ? "" : parseFloat(webMI.query["max"]);
var interval = parseFloat(webMI.query["interval"]);
var initialValue = webMI.query["initValue"];
var tabIndex = webMI.query["tabIndex"] == undefined ? "" : webMI.query["tabIndex"];
var tooltip = webMI.query["tooltip"] == undefined ? "" : webMI.query["tooltip"];
var fontColor = webMI.query["fontColor"];
var inputFill = typeof webMI.query["fill"] != "undefined" ? webMI.query["fill"] : webMI.query["inputFill"];
var fillColorInactive = webMI.query["fillColorInactive"];
var fillColor = typeof webMI.query["buttonFill"] != "undefined" ? webMI.query["buttonFill"] : webMI.query["fillColor"];
var buttonStrokePressed = webMI.query["buttonStrokePressed"];
var focusStrokeColor = webMI.query["focusStrokeColor"];
var consistencyGroup = webMI.query["consistencyGroup"];
var alarmToSubscribe = webMI.query["alarm"];
var alarmIndication = webMI.query["alarmIndication"];
var statusEnabled = webMI.query["statusEnabled"];
var statusTrigger = webMI.query["statusTrigger"];
var statusIndication = webMI.query["statusIndication"];
var keyboard = webMI.query["keyboard"];
var number_keyboard = webMI.query["number_keyboard"];
var message_dialog_small = webMI.query["message_dialog_small"];
var right = webMI.query["right"] == undefined ? "" : webMI.query["right"];
var activeValue = (webMI.query["activeValue"] == undefined) ? "" : webMI.query["activeValue"];
var activeNode = (webMI.query["activeNode"] == undefined) ? "" : webMI.query["activeNode"];
var curValue = 0;
var CONST_NUMBER_FORMAT = "[^-0-9.]";
var format = CONST_NUMBER_FORMAT;
var isIOSDevice = /(iPod|iPhone|iPad)/.test(navigator.userAgent);
var storedEvent = {keyCode: null, shiftKey: false};
var active = false;
var isPressed = false;
var isRunning = false;
var activeTimer;


var foreignObject;
var inputActive = false;
var inputFO = webMI.dom.createElement("http://www.w3.org/1999/xhtml", "input");
inputFO.type = "number";
inputFO.step = stepInc;
inputFO.min = min;
inputFO.max = max;
inputFO.id = "html_input_" + document.getElementById("input_clickarea").id;
inputFO.className = "hideArrows";
inputFO.style.width = "100%";
inputFO.style.height = "100%";
inputFO.style.borderWidth = "0px";
inputFO.style.padding = "0px 8px 0px 0px";
inputFO.style.textAlign = "center";
inputFO.style.color = fontColor;
inputFO.style.fontFamily = webMI.query["fontFamily"];
inputFO.style.fontSize = parseFloat(webMI.query["fontSize"]) + "px";
inputFO.style.boxSizing = "border-box";

var isTouch = (navigator.userAgent.indexOf("Mobi") > -1);
var useSVGKeyboard = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Configuration", {
	"action": "existsIndexParameter",
	"parameterName": "useSVGKeyboard"
});
if (useSVGKeyboard == "true")
	isTouch = true;

var tabHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tab Handler");
var isActivationNodeSet = activeNode != "" && String(activeValue) != "";

var accessControlManager = false;
if (webMI.getAccessControlSupport()) {
	accessControlManager = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Access Control Manager");
}

/** advanced menu layout wiht corrections **/
var menuLayout = {
	customElementPosition: webMI.query["elementPosition"],
	customFadeInAtHover: webMI.query["fadeInAtHover"],
	customElementOffsetX: webMI.query["elementOffsetX"],
	customElementOffsetY: webMI.query["elementOffsetY"],
	customClickareaEnlargement: webMI.query["clickareaEnlargement"],
	customElementLayoutOffsets: {}
}

/**
 * RUNTIME SECTION
 */

if (webMI.query.displayAcNotification === "true") {
	var notifierConfig = {
		id: document.getElementById("bg").id,
		rights: [
			{nodeId: webMI.query["base"], rights: ["read"]},
			{nodeId: webMI.query["alarm"], rights: "read"},
			{nodeId: webMI.query["activeNode"], rights: "read"}
		],
		menuLayout: menuLayout
	};
}

var rightsHandlingProperties = {
	right: right,
	checkBaseNodeWriteRight: true,
	isActivationNodeSet: isActivationNodeSet,
	notifierConfiguration: webMI.query.displayAcNotification === "true" ? notifierConfig : {},
	setActiveTrigger: false,
	handleStatus: true
};

if (typeof rightsHandling === "function")
	rightsHandling(rightsHandlingProperties);

/* AC set n/a on read denie */
if (webMI.getAccessControlSupport()) {
	var accessControlManager = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Access Control Manager");
	var compareRights = [
		{node: webMI.query["base"], right: "read"}
	];

	accessControlManager.assist.handleWithPermissions(
		compareRights,
		readGranted,
		readDenied
	);

	function readGranted() {
		// nothing to do
	}

	function readDenied() {
		webMI.gfx.setText("input_label", "T{N/A}");
	}
}

if (initialValue) {
	curValue = parseFloat(initialValue);
}

webMI.gfx.setText("input_label", curValue);

if (consistencyGroup)
	var consistencyHandler = webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Consistency Handler");

if (alarmToSubscribe != "")
	initAlarm(alarmToSubscribe);

if (base != "") {
	if (consistencyGroup) {
		consistencyHandler.register(consistencyGroup, base, update);
	} else {
		webMI.data.subscribe(base, function (e) {
			curValue = parseFloat(e.value);

			if (isNaN(curValue)) {
				curValue = "-";
			}
			webMI.gfx.setText("input_label", curValue);
			if (typeof e.status != "undefined" && typeof handleStatus === "function")
				handleStatus(e.status);
		});
	}
}

inputFO.onblur = blurHandler;

webMI.addOnload(function () {
	var doc = document.getElementById("clickarea_inc").ownerDocument;
	tabHandler.register(tabIndex, keyHandler, doc);
});

if (tooltip != "") {
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		auto: "true",
		id: "clickarea_inc",
		text: tooltip
	});
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		auto: "true",
		id: "clickarea_dec",
		text: tooltip
	});
	webMI.callExtension("SYSTEM.LIBRARY.ATVISE.QUICKDYNAMICS.Tooltip", {
		auto: "true",
		id: "input_clickarea",
		text: tooltip
	});
}

/**
 * FUNCTION SECTION
 */

function setActiveLayout() {
	webMI.gfx.setFill("input_field_widget", inputFill);
	webMI.gfx.setFill("input_bg", fillColor);
	webMI.gfx.setFill("inc_bg", fillColor);
	webMI.gfx.setFill("dec_bg", fillColor);
	webMI.gfx.setVisible("inc_stroke", null);
	webMI.gfx.setVisible("dec_stroke", null);
	active = true;
}

function setInactiveLayout() {
	webMI.gfx.setFill("input_field_widget", fillColorInactive);
	webMI.gfx.setFill("input_bg", fillColorInactive);
	webMI.gfx.setFill("inc_bg", fillColorInactive);
	webMI.gfx.setFill("dec_bg", fillColorInactive);
	webMI.gfx.setVisible("inc_stroke", false);
	webMI.gfx.setVisible("dec_stroke", false);
	active = false;
}

function update(value) {
	var newValue = value;

	if ((String(max) != "") && (newValue > max)) newValue = max;
	else if ((String(min) != "") && (newValue < min)) newValue = min;

	if (base != "" && !consistencyGroup) {
		handleWriteNode(writeValueAllowed, writeValueForbidden);

		function writeValueAllowed() {
			//webMI.data.write(base, newValue);
		}

		function writeValueForbidden() {
			// console.error("Error write to node: " + base + " (Permission denied)");
		}
	} else {
		curValue = value;
		webMI.gfx.setText("input_label", newValue);
	}
}

function getDisplayParameters() {
	var communicationID = new Date().getTime().toString();
	webMI.trigger.connect(communicationID, function (e) {
		setCurrentValue(curValue = e.value);
	});

	var passObj = {};
	for (var i in webMI.query)
		passObj[i] = webMI.query[i];
	passObj["minValue"] = passObj["min"];
	passObj["maxValue"] = passObj["max"];
	passObj["trigger"] = communicationID;
	if (!consistencyGroup)
		passObj["target"] = passObj["base"];
	return passObj;
}

function focusTH() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", focusStrokeColor);
	}
}

function blurTH() {
	if (active) {
		webMI.gfx.setStroke("focus_frame", "none");
	}
}

function applyTH() {
	if (active) {
		var tmp = null;
		if (useSVGKeyboard) {
			var size = format != undefined && format == CONST_NUMBER_FORMAT ? {w: 378, h: 328} : {w: 700, h: 300};
			var keyboardParam = getDisplayParameters()

			if (format != undefined && format == CONST_NUMBER_FORMAT) {
				keyboard = number_keyboard;
			}
			webMI.display.openWindow({
				display: keyboard,
				extern: false,
				height: size.h,
				menubar: false,
				modal: true,
				movable: true,
				resizable: false,
				scrollbars: false,
				status: false,
				title: "T{Keyboard}",
				toolbar: false,
				width: size.w,
				query: keyboardParam
			});
		} else {
			switchToInputMode();
		}
	}
}

function backTH() {
}

function arrowTH(dir) {
	if (active && (dir == 38 || dir == 40)) {
		var step = (dir == 40) ? stepDec * (-1) : stepInc;
		//Execute action once on mousedown
		var newValue = (curValue + step);
		if (((String(max) == "") || (newValue <= max)) && ((String(min) == "") || (newValue >= min))) {
			setCurrentValue(newValue);
		}
	}
}

function keyHandler(keyTH, param2) {
	if (keyTH == "focus") {
		focusTH();
	} else if (keyTH == "blur") {
		blurTH();
	} else if (keyTH == "apply") {
		applyTH();
	} else if (keyTH == "back") {
		backTH();
	} else if (keyTH == "arrow") {
		(param2 == 38) && webMI.gfx.setFill("inc_stroke", "url(#linear_2)");
		(param2 == 40) && webMI.gfx.setFill("dec_stroke", "url(#linear_2)");
		arrowTH(param2);
	} else if (keyTH == "releaseClick") {
		webMI.gfx.setFill("inc_stroke", "url(#linear_1)");
		webMI.gfx.setFill("dec_stroke", "url(#linear_1)");
	} else if (keyTH == "isActive") {
		return active && param2(document.getElementById("clickarea_inc").parentNode);
	}
}

function stopPropagation(event) {
	/*
	 * If the ALT key is pressed together with one or more other keys on
	 * Firefox (only Windows), there will be no keyup event when the ALT
	 * key gets released. Since the ALT key is being used for paning in
	 * atvise visualization, we have to make sure that key listeners in the
	 * global document do not get triggered if someone is currently entering
	 * something in the inputFO (like "someone@example.com").
	 **/
	if (event.altKey) {
		if (event.stopPropagation)
			event.stopPropagation();
		else
			event.cancelBubble = true;
	}
}

function touchstartHandler(e) {
	if (e.target !== inputFO && inputActive) {
		blurHandler();
	}
}

function blurHandler() {
	switchToOutputMode();
	tabHandler.setAcceptKeys(true);

	if (storedEvent["keyCode"] != null) {
		if (storedEvent["shiftKey"] && storedEvent["keyCode"] == "9")
			tabHandler.prevTab();
		else if (storedEvent["keyCode"] == "9")
			tabHandler.nextTab();
	}

	if (storedEvent["keyCode"] != "27") {
		//workaround: setTimeout for Chrome crash error (clicking out from the input field or clicking enter while holding a button pressed).
		setTimeout(function () {
			checkInput();
		}, 0);
	}

	storedEvent["keyCode"] = null;
}

function checkInput() {
	var tmpValue = parseFloat(inputFO.value.replace(",", "."));
	if (inputFO.value.trim() == "" && inputFO.validity.valid) {
		tmpValue = 0;
	}
	if (isNaN(tmpValue)) {
		showMessageDialog("T{Invalid format!}", "T{Please enter only numeric values.}");
	} else if (String(max) != "" && tmpValue > max) {
		showMessageDialog("T{Value too high!}", webMI.sprintf("T{Please enter a value less than or equal to %d.}", max));
	} else if (String(min) != "" && tmpValue < min) {
		showMessageDialog("T{Value too low!}", webMI.sprintf("T{Please enter a value greater than or equal to %d.}", min));
	} else {
		curValue = tmpValue;
		setCurrentValue(curValue);
	}
}

function showMessageDialog(headline, message) {
	webMI.display.openWindow({
		display: message_dialog_small,
		height: 160,
		width: 400,
		modal: true,
		resizable: false,
		movable: true,
		scrollbars: false,
		menubar: false,
		status: false,
		toolbar: false,
		query: {
			headline: headline,
			message: message,
			button: "T{OK}"
		}
	});
}

function setCurrentValue(newValue) {
	handleWriteNode(writeValueAllowed, writeValueForbidden);
	//Activo Trigger Personalizado
	webMI.trigger.fire("com.atvise.rocker_" + name, newValue);
	function writeValueAllowed() {
		if (base != "" && !consistencyGroup) {
				webMI.data.write(base, newValue, function (e) {
				if (e && e.error) {
					showMessageDialog("T{Invalid format!}", "T{Please enter only numeric values.}");

					webMI.data.read(base, function (e) {
						curValue = e.value;
						if (typeof e.status != "undefined" && typeof handleStatus === "function")
							handleStatus(e.status);
					});
				}
			});
		} else {
			curValue = newValue;
			webMI.gfx.setText("input_label", newValue);

			if (consistencyGroup)
				consistencyHandler.set(consistencyGroup, base, newValue);
		}

		webMI.trigger.fire("valuechanged", newValue, "");
	}

	function writeValueForbidden() {
		if (!base) {
			webMI.trigger.fire("valuechanged", newValue, "");
		}
	}
}

function buttonPressed(pressed, step) {
	isPressed = pressed;

	if (isPressed && step) {
		//Execute action once on mousedown
		var newValue = (curValue + step);

		//if ((String(max) != "") && (newValue > max)) newValue = max;
		//if ((String(min) != "") && (newValue < min)) newValue = min;
		if (((String(max) == "") || (newValue <= max)) && ((String(min) == "") || (newValue >= min))) {
			setCurrentValue(newValue);
		}

		// Execute action while holding mousedown

		if (interval > 0) {
			isRunning = true;
			var callFn = function () {
				doInDecrement(step);
			};
			activeTimer = setTimeout(callFn, interval);
		}
	} else if (isRunning && activeTimer) {
		isRunning = false;
		clearTimeout(activeTimer);
	}
}

function doInDecrement(step) {
	if (isRunning && isPressed) {
		var calcStep = ((step < 0) ? (-1) * step : step) - 1;
//		var steps = Math.floor(max / calcStep);
		var newValue = (curValue + step);

		//if ((String(max) != "") && (newValue > max)) newValue = max;
		//if ((String(min) != "") && (newValue < min)) newValue = min;
		if (((String(max) == "") || (newValue <= max)) && ((String(min) == "") || (newValue >= min))) {
			setCurrentValue(newValue);
		}

		var callFn = function () {
			doInDecrement(step);
		};
		activeTimer = setTimeout(callFn, interval);
	}
}

function switchToInputMode() {
	if (active) {
		tabHandler.setAcceptKeys(false);
		inputFO.value = curValue;
		webMI.gfx.setVisible("input_clickarea", false);

		function setFocus() {
			inputFO.focus();
			if (webMI.query["selectTextOnFocus"] == "true")
				inputFO.select();
		}

		var inputElement = document.getElementById("input_element");
		var widthBorderArea = webMI.gfx.getWidth("border_area");
		var heightBorderArea = webMI.gfx.getHeight("border_area");
		var xBorderArea = webMI.gfx.getX("border_area");

		foreignObject = webMI.gfx.addForeignObject({
			x: xBorderArea,
			y: 0,
			width: widthBorderArea,
			height: heightBorderArea,
			id: "input_fo",
			childNodes: [inputFO]
		}, inputElement);

		foreignObject.style.outline = "2px solid black";
		foreignObject.style.outlineOffset = "-2px";
		setFocus();
		inputActive = true;
	}
}

function switchToOutputMode() {
	if (inputActive) {
		inputActive = false;
		webMI.gfx.setVisible("input_clickarea", true);

		if (foreignObject) {
			webMI.gfx.removeForeignObject(foreignObject);
			foreignObject = undefined;
		}
	}
}

function releaseInc() {
	if (active) {
		webMI.gfx.setFill("inc_stroke", "url(#linear_1)");
		webMI.gfx.setStroke("inc_stroke", "none");
		buttonPressed(false, null);
	}
}

function releaseDec() {
	if (active) {
		webMI.gfx.setFill("dec_stroke", "url(#linear_1)");
		webMI.gfx.setStroke("dec_stroke", "none");
		buttonPressed(false, null);
	}
}


/**
 * handling node right for write
 * @param callback if allowed
 * @param fallback if disallowed
 */
function handleWriteNode(callback, fallback) {
	if (!base) {
		callback();
		return;
	}

	var compareRights = [
		{node: base, right: "write"}
	];

	if (accessControlManager) {
		accessControlManager.assist.handleWithPermissions(compareRights, callback, fallback);
	} else {
		callback();
	}
}


/**
 * EVENT SECTION
 */
webMI.addEvent("clickareaFO", "click", function (e) {
	if (!base)
		writeValueAllowed();
	else
		handleWriteNode(writeValueAllowed, writeValueForbidden);

	function writeValueAllowed() {
		tabHandler.setCurrentIndex(keyHandler);
		switchToInputMode();
	}

	function writeValueForbidden() {
	}
});

webMI.addEvent(inputFO, "keyup", stopPropagation);

webMI.addEvent(inputFO, "keydown", function (e) {
	var keyCode = e.keyCode;
	if (/MSIE/.test(navigator.userAgent)) {
		storedEvent["keyCode"] = e.keyCode;
		storedEvent["shiftKey"] = e.shiftKey;
	}
	if (keyCode == "13" || keyCode == "9") {
		inputFO.blur();
		if (keyCode == "13")
			tabHandler.setAcceptKeysPrevent(true);
	} else if (keyCode == "27") {
		storedEvent["keyCode"] = "27";
		tabHandler.setAcceptKeysPrevent(true);
		inputFO.blur();
	}

	stopPropagation(e);
});

webMI.addEvent("clickarea_inc", "mousedown", function (e) {
	var id = "clickarea_inc";
	var value = true;
	return function (value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			webMI.gfx.setFill("inc_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("inc_stroke", buttonStrokePressed);
			buttonPressed(true, stepInc);
		}
	}(value);
});

webMI.addEvent("clickarea_inc", "mouseup", function (e) {
	var id = "clickarea_inc";
	var value = true;
	return function (value) {
		releaseInc();
	}(value);
});

webMI.addEvent("clickarea_inc", "mouseout", function (e) {
	var id = "clickarea_inc";
	var value = true;
	return function (value) {
		releaseInc();
	}(value);
});

webMI.addEvent("clickarea_inc", "dragstart", function (e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

webMI.addEvent("clickarea_dec", "mousedown", function (e) {
	var id = "clickarea_dec";
	var value = true;
	return function (value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			webMI.gfx.setFill("dec_stroke", "url(#linear_2)");
			webMI.gfx.setStroke("dec_stroke", buttonStrokePressed);
			buttonPressed(true, stepDec * -1);
		}
	}(value);
});

webMI.addEvent("clickarea_dec", "mouseup", function (e) {
	var id = "clickarea_dec";
	var value = true;
	return function (value) {
		releaseDec();
	}(value);
});

webMI.addEvent("clickarea_dec", "mouseout", function (e) {
	var id = "clickarea_dec";
	var value = true;
	return function (value) {
		releaseDec();
	}(value);
});

webMI.addEvent("clickarea_dec", "dragstart", function (e) {
	if (e.preventDefault) {
		e.preventDefault();
	}
});

webMI.addEvent("input_clickarea", "click", function (e) {
	var id = "input_clickarea";
	var value = true;
	return function (value) {
		if (active) {
			tabHandler.setCurrentIndex(keyHandler);
			var tmp = null;

			if (useSVGKeyboard) {
				var size = format != undefined && format == CONST_NUMBER_FORMAT ? {w: 378, h: 328} : {w: 700, h: 300};
				var keyboardParam = getDisplayParameters();

				if (format != undefined && format == CONST_NUMBER_FORMAT) {
					keyboard = number_keyboard;
				}
				webMI.display.openWindow({
					display: keyboard,
					extern: false,
					height: size.h,
					menubar: false,
					modal: true,
					movable: true,
					resizable: false,
					scrollbars: false,
					status: false,
					title: "T{Keyboard}",
					toolbar: false,
					width: size.w,
					query: keyboardParam
				});
			} else {
				switchToInputMode();
			}
		}
	}(value);
});

/**
 * TRIGGER SECTION
 */

webMI.trigger.connect("setValue", function (e) {
	update(e.value);	
});

webMI.trigger.connect("com.atvise.setBackground", function (e) {
	backgroundColor = (e.value == "") ? backgroundColor : e.value;
	setColorization();
});

webMI.trigger.connect("com.atvise.switchToInputMode", function (e) {
	switchToInputMode();
});

webMI.trigger.connect("com.atvise.setActive", function (e) {
	if (e.value) {
		setActiveLayout();
	} else {
		setInactiveLayout();
	}
});

]]></code>
</script>
