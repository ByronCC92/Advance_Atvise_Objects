<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<svg height="450" version="1.2" width="1000" xmlns="http://www.w3.org/2000/svg" xmlns:atv="http://webmi.atvise.com/2007/svgext" xmlns:xlink="http://www.w3.org/1999/xlink">
 <defs/>
 <metadata>
  <atv:parameter behavior="optional" defaultvalue="" desc="Global_List" name="Global_List" valuetype="global"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Global_List_Address" name="Global_List_Address" valuetype="string"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Global Trigger" name="Global_Trigger" valuetype="string"/>
  <atv:parameter behavior="optional" desc="Maintenance Elements Node" name="Mant_Elements" valuetype="address"/>
  <atv:parameter behavior="optional" config="List;Trigger" defaultvalue="Trigger" desc="Selection Method" name="Global_List_Method" valuetype="enum"/>
  <atv:parameter behavior="optional" defaultvalue="" desc="Color" name="Color" substitute="$Color$" valuetype="global"/>
  <atv:parameter behavior="optional" defaultvalue="16" desc="Font_Size" name="Font_Size" substitute="$Font_Size$" valuetype="number"/>
  <atv:gridconfig enabled="true" gridstyle="lines" height="20" width="20"/>
  <atv:snapconfig enabled="true" height="10" width="10"/>
 </metadata>
 <svg atv:refpx="91.359" atv:refpy="131.087" height="30" id="id_1" transform="matrix(1,0,0,1.3333,0,0)" width="160" x="11.359" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.atvise_Advanced_Objects_Complementary_Elements.Combobox_Complementary_Element" y="83.316">
  <atv:argument name="name" value="Maintenance_Modifier"/>
  <atv:argument name="text1" value="T{Add}"/>
  <atv:argument name="text1value" value="0"/>
  <atv:argument name="text2" value="T{Modify}"/>
  <atv:argument name="text2value" value="1"/>
  <atv:argument name="text3" value="T{Remove}"/>
  <atv:argument name="text3value" value="2"/>
  <atv:argument name="fontSize" value="18"/>
  <atv:overwrite height="35.999" id="focus_frame" transform="matrix(1,0,0,0.75,0,0)"/>
  <atv:overwrite id="button_stroke" transform="matrix(1,0,0,0.75,0,0)" y="9.999"/>
  <atv:overwrite id="id_7" transform="matrix(1,0,0,0.75,0,0)" y="10.999"/>
  <atv:overwrite id="button_bg" transform="matrix(1,0,0,0.75,0,0)" y="9.999"/>
  <atv:overwrite id="combobox_label" transform="matrix(1,0,0,0.75,0,0)" y="24.499"/>
  <atv:overwrite height="31.999" id="blinking_frame" transform="matrix(1,0,0,0.75,0,0)"/>
  <atv:overwrite height="31.999" id="combobox_bg" transform="matrix(1,0,0,0.75,0,0)"/>
  <atv:overwrite height="37.999" id="id_1" transform="matrix(1,0,0,0.75,0,0)"/>
  <atv:overwrite height="39.999" id="id_0" transform="matrix(1,0,0,0.75,0,0)"/>
 </svg>
 <text atv:refpx="29.606" atv:refpy="91" fill="$Color$" font-family="Arial" font-size="24" id="id_2" x="15" y="95.5">Action</text>
 <g atv:refpx="430" atv:refpy="110.543" id="Maintenance_Entry">
  <svg atv:refpx="430" atv:refpy="131.087" height="40" id="id_0" width="400" x="230" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.atvise_Advanced_Objects_Complementary_Elements.In_Text_Efficient_Complementary_Element" y="111.087">
   <atv:argument name="Name" value="New_Maintenance"/>
  </svg>
  <text atv:refpx="268.417" atv:refpy="91" fill="$Color$" font-family="Arial" font-size="24" id="id_3" x="234.5" y="95.5">Maintenance</text>
 </g>
 <svg atv:refpx="499.994" atv:refpy="310.349" height="230" id="id_4" transform="matrix(1.3514,0,0,1.2291,0,0)" width="740" x="0" xlink:href="SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.atvise_Advanced_Objects_Complementary_Elements.Alarm_Table_Complementary_Element" y="137.499">
  <atv:argument name="tableID" value="Mant_Global_List_Mod"/>
  <atv:argument name="globalBorderColor" prefix="Color" value="SYSTEM.GLOBALS."/>
  <atv:argument name="globalFillColor" prefix="Color" value="SYSTEM.GLOBALS."/>
  <atv:argument name="globalFontColor" value="SYSTEM.GLOBALS.atvFontColor2"/>
  <atv:argument name="row_text_size" prefix="Font_Size" value=""/>
  <atv:argument name="detail_text_size" prefix="Font_Size" value=""/>
  <atv:argument name="footer_text_size" prefix="Font_Size" value=""/>
  <atv:argument name="row_height" value="25"/>
 </svg>
 <svg atv:refpx="790" atv:refpy="120.001" height="30" id="Excecute" transform="matrix(2.375,0,0,1.6667,0,0)" width="80" x="294.737" xlink:href="SYSTEM.LIBRARY.ATVISE.OBJECTDISPLAYS.Advanced.button" y="59.999">
  <atv:argument name="label" value="T{Excecute}"/>
  <atv:argument name="fontSize" value="20"/>
  <atv:overwrite height="48.001" id="id_6" transform="matrix(0.4211,0,0,0.6,0,0)" width="188"/>
  <atv:overwrite id="button_label_2" transform="matrix(0.4211,0,0,0.6,0,0)" x="95" y="36.501"/>
  <atv:overwrite id="button_label_1" transform="matrix(0.4211,0,0,0.6,0,0)" x="95" y="21.501"/>
  <atv:overwrite id="button_label" transform="matrix(0.4211,0,0,0.6,0,0)" x="95" y="29.501"/>
  <atv:overwrite id="button_symbol_bottom" transform="matrix(0.2526,0,0,0.36,0,0)" x="148.167" y="42.96"/>
  <atv:overwrite id="button_symbol_top" transform="matrix(0.2526,0,0,0.36,0,0)" x="148.167" y="21.627"/>
  <atv:overwrite id="button_symbol" transform="matrix(0.4211,0,0,0.6,0,0)" x="85" y="15.001"/>
  <atv:overwrite height="46.001" id="button_stroke" transform="matrix(0.4211,0,0,0.6,0,0)" width="186"/>
  <atv:overwrite height="48.001" id="button_bg" transform="matrix(0.4211,0,0,0.6,0,0)" width="188"/>
  <atv:overwrite height="50.001" id="outer_frame" transform="matrix(0.4211,0,0,0.6,0,0)" width="190"/>
 </svg>
 <text atv:refpx="72.527" atv:refpy="41" fill="$Color$" font-family="Arial" font-size="24" id="Title_Text" x="15" y="45.5">Add Maintenance to :</text>
 <script atv:desc="" atv:name="" type="text/ecmascript"><![CDATA[//---------------Initialize Variables---------//

//Internal

//Table Variables
var self;
var tableData = [];
var Table_Data=[];
var Ready_Data=[];
var Ind_Mant=0; //Variable for the finished maintenance
var item; //Variable for current maintenance info
var Table_Id;

//Maintenance
var Mant_ElementsR;
var Modify_Index=0;
var Table_Initialized=false;
var tableController;
var Action="Add";
var New_Maintenance;
var New_Value;
var Global_Trigger_Value;


//External
var Global_List_Method=webMI.query["Global_List_Method"];
var Global_List_Address;
var Global_List_AddressR;
var Global_List;
var Global_Trigger=webMI.query["Global_Trigger"];
var Color=webMI.query["Color"];

//Confirmation Window Variables
var Action_Trigger_Name="Change_Global_Maintenance";
var Confirmation_Text;

//---------------Initial Conditions---------//
webMI.addOnload(function() {

	 //Define Global List 
	 if (Global_List_Method=="List"){  //Based on a List
		Global_List_Address="SYSTEM.GLOBALS."+webMI.query["Global_List_Address"];
		Global_List=webMI.query["Global_List"];
		Mant_ElementsR=webMI.query["Mant_Elements"];
		updateTitleText();
	 }
	 
	 console.log(Global_List);
	 
	  //Initialize Add as default 
	  webMI.trigger.fire("setSelectedItem_Maintenance_Modifier", {value:{value:0, text:Action}});
	  
	  //Initialize Maintenance Text
	  New_Maintenance="New_Maintenance";
	  webMI.trigger.fire("write_value_New_Maintenance", {value:New_Maintenance});
	  
	  console.log("Global_List");
	  console.log(Global_List);
	 
	  (async () => {
		 await waitForCondition();
			if (Global_List_Method=="List"){  //Based on a List
				webMI.trigger.fire("update_mant_table", 0); //Update table
			}
		})();


});



//---------------Trigger Section--------------//

//Monitor Global Maintenance Element
webMI.trigger.connect(Global_Trigger, function (e) {

	if(Global_List_Method=="Trigger"){
		Global_Trigger_Value=e;
		//Find the address of the global list
		Global_List_AddressR=e.value.Elements[0]+".Parameters.Mant_Address";
		Mant_ElementsR=Global_Trigger_Value.value.Elements[0]+".Parameters.Mant_Elements";
		//Read List Address
		webMI.data.read(Global_List_AddressR, function(e) {
			Global_List_Address=e.value;
			updateTitleText();
			//Read List
			webMI.data.read(Global_List_Address, function(f) {
				if (f.value!=undefined){
					var raw_List=f.value;			  
					Global_List=Process_read_List(raw_List);
			    }
			    (async () => {
					await waitForCondition();
					if (tableController!=undefined){
						//Update Table
						webMI.trigger.fire("update_mant_table", 0); //Update chart	
					}
				})();
			});
			
		});
	}
	
});


//Monitor Action Combobox 
webMI.trigger.connect("com.atvise.combobox_Maintenance_Modifier", function (e) {
	Action=e.value.text;	
	updateTitleText();
	console.log("Action: "+Action);	
});

//Monitor New Maintenance Input 
webMI.trigger.connect("read_value_New_Maintenance", function(e) {
	New_Maintenance=e.value;	
	console.log("New_Maintenance: "+New_Maintenance);	
});

//Excecute Action
webMI.addEvent("Excecute", "click", function(e) {

	if(Global_List_Address!=undefined){
		switch (Action) {
		  case "Add": //Add
			New_Value=Ready_Data.length+1;
			Confirmation_Text=Action+" "+New_Maintenance+" to "+(Global_List_Address.split(".")).pop();
			break;		
		  case "Modify": //Modify
			New_Value=Modify_Index+1;
			Confirmation_Text=Action+" <span style='color: "+ Color +";text-decoration: underline;'>"+Ready_Data[Modify_Index].Maintenance+"</span> to "+" <span style='color: "+ Color +";text-decoration: underline;'>"+New_Maintenance+"</span> from "+(Global_List_Address.split(".")).pop();
			break;  
		  case "Remove": //Remove
			New_Value=0;
			Confirmation_Text=Action+" "+Ready_Data[Modify_Index].Maintenance+" from "+(Global_List_Address.split(".")).pop();
			break;  
		}
		
		var Confirmation_Parameters={Action_Trigger_Name:Action_Trigger_Name,Confirmation_Text:Confirmation_Text};
		webMI.display.openWindow({display:"SYSTEM.LIBRARY.PROJECT.OBJECTDISPLAYS.atvise_Advanced_Objects_Complementary_Elements.Action_Confirmation_Window",extern:false,height:300,menubar:false,modal:false,movable:false,resizable:false,scrollbars:false,status:false,title:"Confirm Maintenance Change",toolbar:false,width:500,query:Confirmation_Parameters});
	
	}	
	
});


//Monitor change agreement
webMI.trigger.connect(Action_Trigger_Name, function(e) {
	var text=e.value;	
	var New_ValueI={"text":New_Maintenance,"value":New_Value};
	//Excecute action
	modifyElement(Global_List_Address,Action,Modify_Index,New_ValueI);
});

//---------------Table Section--------------//

webMI.table.loadResources(function () {

	// Create the configuration //
	var config = [];

	// Configuration of the columns to be displayed //
	config["columns"] =
		[
			{   id: "ID", name: "ID", field: "ID", sortable: false, filter: false, visible: true, width:5},
			{   id: "Maintenance", name: "Maintenance", field: "Maintenance", sortable: false, filter: false, visible: true, width:200}
		];
	
	// Configuration of the runtime behavior //
	config["mode"] = "live";
	
	// Configuration selection of data //
	config["onClickCallback"] = function(e, info){   
			
		item = info.item;     
        Modify_Index = info.rowIndex;
        Global_Id=item["ID Global"];
        Table_Id = item.id;
        
        if(Action=="Modify"){ //Only if it is in Modifying mode
			New_Maintenance=Ready_Data[Modify_Index].Maintenance;
			webMI.trigger.fire("write_value_New_Maintenance", {value:New_Maintenance});
	    }                
    }
	
	// Configuration of the data query //
	config["dataRequestFunction"] =
		function customDataRequest(continuation) {
			self = this;
			tableController = webMI.table.request("Mant_Global_List_Mod", "controller");
					
			webMI.trigger.connect("update_mant_table", function (h) {
			
				Table_Initialized=true;
				
				//------------Bring data from historian-----------//			
				
				//Filter Config
				Table_Data=[];
				Ready_Data=[];

			    
				//Extract Data from Global_List				
				for (const key in Global_List) {
					if (Global_List.hasOwnProperty(key)) {
						Table_Data.push({id:key,text:Global_List[key].text});
					}
				}						
				//Prepare Ready data									
				for (var i=0; i<Table_Data.length; i++){						
					Ready_Data.push({
						"ID":Table_Data[i].id,
						"Maintenance": Table_Data[i].text,	
					});				
				}
				console.log("Columns_Config");
				console.log(config["columns"]);
				console.log("Ready_Data");
				console.log(Ready_Data);
				
				var data = {};
				data.result= Ready_Data;
				tableData.push(data);
				tableController.clearData(); //Clear Data
				self.addData(data);				
			});					
		};
		

	// Registration of the configuration //
	webMI.table.register("Mant_Global_List_Mod", "config",  config);
	webMI.table.setReady("Mant_Global_List_Mod", "config");
});



//---------------Functions Section--------------//

// Function to modify the Global List
function modifyElement(Global_List_Address,Action,Modify_Index,New_Value) {
	console.log("New_Value");
	console.log(New_Value);
	//Call Modification Script
    webMI.data.call("Global_List_Modifier_webMI_Method_Script", {"Global_List":Global_List_Address , "Action": Action, "Modify_Index":Modify_Index, "New_Value":New_Value}, function(e) {
		//Update Table
		if (tableController!=undefined){
			//Read new Global List
			webMI.data.read(Global_List_Address, function(e) {
			  var raw_List=e.value;			  
			  Global_List=Process_read_List(raw_List);			 
				
			  if (Global_List_Method=="List"){ 		
				 //Update Table and Combobox
				 webMI.trigger.fire("update_mant_table", 0); //Update chart
			  }
			  else if (Global_List_Method=="Trigger"){ 
				  //Update Node
				  webMI.data.write(Mant_ElementsR,JSON.stringify(Global_List));	
				  webMI.trigger.fire("Global_Object_Current_Addres", {Text:Global_Trigger_Value.value.Text, Elements:Global_Trigger_Value.value.Elements});
			  }
			});		
			
		}
	});
}

//Wait for data to be ready

function waitForCondition() {
  return new Promise((resolve) => {
    const interval = setInterval(() => {
	var condition=(tableController!=undefined&& Global_List!=undefined);
      if (condition) {
        clearInterval(interval);
        resolve(true);
      }
    }, 100);
  });
}

//Process Global List after read
function Process_read_List(raw_List){
	raw_List = raw_List.map((x, i) => JSON.parse('{' + x + '}')[i]);
			  
	  var Global_ListI={};
	  for (var i=0; i<raw_List.length; i++){
		Global_ListI[i]=raw_List[i];
	  }
	  
	  return Global_ListI;
}


//Update Title Text
function updateTitleText(){
	if(Global_List_Address!=undefined){
		var New_Text;
		switch (Action) {
			  case "Add": //Add
				New_Text="Add Maintenance to: "+(Global_List_Address.split(".")).pop();
				webMI.gfx.setText("Title_Text", New_Text);
				webMI.gfx.setVisible("Maintenance_Entry", true);
				break;		
			  case "Modify": //Modify
				New_Text="Modify Maintenance of: "+(Global_List_Address.split(".")).pop();
				webMI.gfx.setText("Title_Text", New_Text);
				webMI.gfx.setVisible("Maintenance_Entry", true);
				break;  
			  case "Remove": //Remove
				New_Text="Remove Maintenance from: "+(Global_List_Address.split(".")).pop();
				webMI.gfx.setText("Title_Text", New_Text);
				webMI.gfx.setVisible("Maintenance_Entry", false);
				break;  
		}
	}

}




]]></script>
</svg>
